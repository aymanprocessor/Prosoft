@using ProSoft.UI.Global


@{

    ViewData["Title"] = "Degree & Room & Bed";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@inject IViewLocalizer localizer

<div class="container pt-2 ">
    <h1 class="text-center header">@localizer["Degree And Room And Bed"]</h1>

    <div class="d-flex justify-content-between align-items-center mt-4 ">
        <h3 class="text-center header">@localizer["Degrees"]</h3>

        <a asp-controller="DegreeAndRoomAndBed" asp-action="AddDegree" class="btn btn-sm btn-primary fs-6">
            @Html.Raw(GlobalConstants.InsertIcon) @localizer["Add Degree"]
        </a>
    </div>

    <div class="border rounded-2 border-dark mt-3 p-3">
        <table id="DegreeTable" class="table table-hover table-bordered display">
            <thead>
                <tr>
                    <th class="text-center">@localizer["Activation"]</th>
                    <th class="text-center">@localizer["The Code"]</th>
                    <th class="text-center">@localizer["The Description"]</th>
                    <th class="text-center">@localizer["Action"]</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-between align-items-center mt-4 ">
        <h3 class="text-center header">@localizer["Rooms"]</h3>

        <a id="addRoomButton" asp-controller="DegreeAndRoomAndBed" asp-action="AddRoom" class="btn btn-sm btn-primary fs-6" disabled>
            @Html.Raw(GlobalConstants.InsertIcon) @localizer["Add Room"]
        </a>
    </div>

    <div class="border rounded-2 border-dark mt-3 p-3">
        <table id="RoomTable" class="table table-hover table-bordered display">
            <thead>
                <tr>
                    <th class="text-center">@localizer["Activation"]</th>
                    <th class="text-center">@localizer["Room Code"]</th>
                    <th class="text-center">@localizer["Patient Price"]</th>
                    <th class="text-center">@localizer["Relativet Price"]</th>
                    <th class="text-center">@localizer["Action"]</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-between align-items-center mt-4 ">
        <h3 class="text-center header">@localizer["Beds"]</h3>

        <a id="addBedButton" asp-controller="DegreeAndRoomAndBed" asp-action="AddBed" class="btn btn-sm btn-primary fs-6" disabled>
            @Html.Raw(GlobalConstants.InsertIcon) @localizer["Add Bed"]
        </a>
    </div>

    <div class="border rounded-2 border-dark mt-3 p-3">
        <table id="BedTable" class="table table-hover table-bordered display">
            <thead>
                <tr>
                    <th class="text-center">@localizer["Activation"]</th>
                    <th class="text-center">@localizer["Bed Code"]</th>
                    <th class="text-center">@localizer["BedRoomDegree"]</th>
                    <th class="text-center">@localizer["Patient Price"]</th>
                    <th class="text-center">@localizer["Relativet Price"]</th>
                    <th class="text-center">@localizer["Booked"]</th>
                    <th class="text-center">@localizer["Action"]</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>

    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            const addRoomButton = $("#addRoomButton");
            const addBedButton = $("#addBedButton");

            // Initialize Degree Table
            var DegreeTable = new DataTable("#DegreeTable", {
                scroller: true,
                searching: true,
                paging: false,
                select: {
                    style: 'os',
                    toggleable: false
                },
                layout: {
                    topEnd: {
                        search: {
                            text: '_INPUT_',
                            placeholder: '@localizer["Search"]'
                        }
                    }
                },
                language: {
                    emptyTable: "@localizer["No Degrees"]"
                },
                columns: [
                    {
                        data: 'degreeOnOff',
                        className: 'text-center',
                        render: function (data, type, row) {
                            const isChecked = data == 1 ? 'checked' : '';
                            return `<input type="checkbox" data-toggle="switchbutton" data-onstyle="success" data-size="sm" ${isChecked} onchange="handleCheckboxChange(this, '${row.id}')">`;
                        }
                    },
                    { data: 'id', searchable: true, className: 'text-center' },
                    { data: 'degreeName', searchable: true },
                    {
                        className: 'text-center',
                        render: function (data, type, row) {
                            const editBtn = `<a href="/Medical/DegreeAndRoomAndBed/EditDegree/${row.id}" class="btn btn-warning me-1">@Html.Raw(GlobalConstants.EditIcon)</a>`;
                            const deleteBtn = `
                                <form action="/Medical/DegreeAndRoomAndBed/DeleteDegree/${row.id}" method="POST" style="display: inline;">
                                    <button type="submit" class="btn btn-danger me-1">
        @Html.Raw(GlobalConstants.DeleteIcon)
                                    </button>
                                </form>`;
                            return `${editBtn}${deleteBtn}`;
                        }
                    },
                ],
                ajax: {
                    url: `/Medical/DegreeAndRoomAndBed/GetDegrees`,
                    type: "GET"
                }
            });

            // Initialize Room Table
            var RoomTable = new DataTable("#RoomTable", {
                scroller: true,
                searching: true,
                paging: false,
                select: {
                    style: 'os',
                    toggleable: false
                },
                layout: {
                    topEnd: {
                        search: {
                            text: '_INPUT_',
                            placeholder: '@localizer["Search"]'
                        }
                    }
                },
                language: {
                    emptyTable: "@localizer["No Rooms"]"
                },
                columns: [
                    {
                        data: 'roomOnOff',
                        className: 'text-center',
                        render: function (data, type, row) {
                            const isChecked = data == 1 ? 'checked' : '';
                            return `<input type="checkbox" data-toggle="switchbutton" data-onstyle="success" data-size="sm" ${isChecked} onchange="handleCheckboxChangee(this, '${row.id}')">`;
                        }
                    },
                    { data: 'id', searchable: true, className: 'text-center' },
                    { data: 'patientPrice', searchable: true, className: 'text-center' },
                    { data: 'relativetPrice', searchable: true, className: 'text-center' },
                    {
                        className: 'text-center',
                        render: function (data, type, row) {
                            const editBtn = `<a href="/Medical/DegreeAndRoomAndBed/EditRoom/${row.id}" class="btn btn-warning me-1">@Html.Raw(GlobalConstants.EditIcon)</a>`;
                            const deleteBtn = `
                                <form action="/Medical/DegreeAndRoomAndBed/DeleteRoom/${row.id}" method="POST" style="display: inline;">
                                    <button type="submit" class="btn btn-danger me-1">
        @Html.Raw(GlobalConstants.DeleteIcon)
                                    </button>
                                </form>`;
                            return `${editBtn}${deleteBtn}`;
                        }
                    },
                    { data: 'degreeCode', visible: false },

                ]
            });

            // Initialize Bed Table
            var BedTable = new DataTable("#BedTable", {
                scroller: true,
                searching: true,
                paging: false,
                select: {
                    style: 'os',
                    toggleable: false
                },
                layout: {
                    topEnd: {
                        search: {
                            text: '_INPUT_',
                            placeholder: '@localizer["Search"]'
                        }
                    }
                },
                language: {
                    emptyTable: "@localizer["No Beds"]"
                },
                columns: [
                    {
                        data: 'bedOnOff',
                        className: 'text-center',
                        render: function (data, type, row) {
                            const isChecked = data == 1 ? 'checked' : '';
                            return `<input type="checkbox" data-toggle="switchbutton" data-onstyle="success" data-size="sm" ${isChecked} onchange="handleCheckboxChangee(this, '${row.id}')">`;
                        }
                    },
                    { data: 'id', searchable: true, className: 'text-center' },
                    { data: 'bedCodeSys', searchable: true, className: 'text-center' },
                    { data: 'patientPrice', searchable: true, className: 'text-center' },
                    { data: 'relativetPrice', searchable: true, className: 'text-center' },
                    { data: 'bookId', searchable: true, className: 'text-center' },
                    {
                        className: 'text-center',
                        render: function (data, type, row) {
                            const editBtn = `<a href="/Medical/DegreeAndRoomAndBed/EditRoom/${row.id}" class="btn btn-warning me-1">@Html.Raw(GlobalConstants.EditIcon)</a>`;
                            const deleteBtn = `
                                <form action="/Medical/DegreeAndRoomAndBed/DeleteRoom/${row.id}" method="POST" style="display: inline;">
                                    <button type="submit" class="btn btn-danger me-1">
        @Html.Raw(GlobalConstants.DeleteIcon)
                                    </button>
                                </form>`;
                            return `${editBtn}${deleteBtn}`;
                        }
                    },
                ]
            });

            // Degree Table row select event
            DegreeTable.on("select", function (e, dt, type, indexes) {
                const rowData = DegreeTable.row(indexes).data();
                const degreeId = rowData.id;
                fetchRoomData(degreeId);

                const roomDataCounts = RoomTable.rows().count();
                console.log("Count : ", roomDataCounts);
                
                addBedButton.attr("disabled",'');
                BedTable.clear().draw();

                if (!rowData) {
                    console.error("No row data found.");
                    return;
                }
                addRoomButton.removeAttr("disabled").attr("href", `/Medical/DegreeAndRoomAndBed/AddRoom/${degreeId}`);
                
                
                
            });

            // Room Table row select event
            RoomTable.on("select", function (e, dt, type, indexes) { 
                const rowData = dt.row(indexes).data();
                const roomId = rowData.id;
                const degreeId = rowData.degreeCode;
                fetchBedData(degreeId, roomId);

                const bedDataCounts = BedTable.rows().count();
                console.log("Count : ", bedDataCounts);
                if (!rowData ) {
                    console.error("No row data found.");
                    return;
                }

                // Assuming `degreeId` is part of room data
                addBedButton.removeAttr("disabled").attr("href", `/Medical/DegreeAndRoomAndBed/AddBed/?degreeId=${degreeId}&roomId=${roomId}`);
            });

            // Fetch Room data based on degreeId
            function fetchRoomData(degreeId) {
                RoomTable.ajax.url(`/Medical/DegreeAndRoomAndBed/GetRoomsByDegreeId?degreeId=${degreeId}`).load();
            }

            // Fetch Bed data based on degreeId and roomId
            function fetchBedData(degreeId, roomId) {
                BedTable.ajax.url(`/Medical/DegreeAndRoomAndBed/GetBedsByDegreeIdAndRoomId?degreeId=${degreeId}&roomId=${roomId}`).load();
            }
        });
    </script>

}