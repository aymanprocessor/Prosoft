// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProSoft.EF.DbContext;

#nullable disable

namespace ProSoft.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240908085318_active_branch_user_side_eissectiontype_usergroup")]
    partial class active_branch_user_side_eissectiontype_usergroup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProSoft.EF.Models.Accounts.AccBalAll", b =>
                {
                    b.Property<int?>("BalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BAL_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("BalId"));

                    b.Property<int?>("CoCode")
                        .HasColumnType("int")
                        .HasColumnName("CO_CODE");

                    b.Property<string>("DocType")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("DOC_TYPE");

                    b.Property<int?>("LineSrl")
                        .HasColumnType("int")
                        .HasColumnName("LINE_SRL");

                    b.Property<string>("LineType")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("LINE_TYPE");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("Name1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("NAME1");

                    b.Property<long?>("SrlSort")
                        .HasColumnType("bigint")
                        .HasColumnName("SRL_SORT");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.HasKey("BalId");

                    b.ToTable("ACC_BAL_ALL");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Accounts.AccMainCode", b =>
                {
                    b.Property<int>("CoCode")
                        .HasColumnType("int")
                        .HasColumnName("CO_CODE");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("BalanceFlag")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("BALANCE_FLAG");

                    b.Property<string>("BalanceRep")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("BALANCE_REP");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("CurrentLevel")
                        .HasColumnType("int")
                        .HasColumnName("CURRENT_LEVEL");

                    b.Property<int?>("LastLevel")
                        .HasColumnType("int")
                        .HasColumnName("LAST_LEVEL");

                    b.Property<string>("MainName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MAIN_NAME");

                    b.Property<string>("MainSubType")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("MAIN_SUB_TYPE");

                    b.Property<string>("OstazType")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("OSTAZ_TYPE");

                    b.Property<string>("ParentCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PARENT_CODE");

                    b.HasKey("CoCode", "MainCode");

                    b.ToTable("ACC_MAIN_CODE");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Accounts.AccMainCodeDtl", b =>
                {
                    b.Property<int?>("CoCode")
                        .HasColumnType("int")
                        .HasColumnName("CO_CODE");

                    b.Property<string>("SecCode")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("SEC_CODE");

                    b.Property<string>("MainCode")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("MainName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MAIN_NAME");

                    b.HasKey("CoCode", "SecCode", "MainCode");

                    b.ToTable("ACC_MAIN_CODE_DTL");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Accounts.AccStartBal", b =>
                {
                    b.Property<int>("StartBalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("START_BAL_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StartBalId"));

                    b.Property<string>("AccName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("ACC_NAME");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("CoCode")
                        .HasColumnType("int")
                        .HasColumnName("CO_CODE");

                    b.Property<string>("Commentt")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("COMMENTT");

                    b.Property<string>("CostCenterCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("COST_CENTER_CODE");

                    b.Property<string>("CurCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("CUR_CODE");

                    b.Property<decimal?>("CurRate")
                        .HasColumnType("decimal(6, 5)")
                        .HasColumnName("CUR_RATE");

                    b.Property<decimal?>("FCreditCur")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("F_CREDIT_CUR");

                    b.Property<decimal?>("FCreditOr")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("F_CREDIT_OR");

                    b.Property<decimal?>("FDepCur")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("F_DEP_CUR");

                    b.Property<decimal?>("FDepOr")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("F_DEP_OR");

                    b.Property<int?>("FYear")
                        .HasColumnType("int")
                        .HasColumnName("F_YEAR");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.Property<string>("TransType")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("TRANS_TYPE");

                    b.HasKey("StartBalId");

                    b.ToTable("ACC_START_BAL");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Accounts.AccSubCode", b =>
                {
                    b.Property<int>("CoCode")
                        .HasColumnType("int")
                        .HasColumnName("CO_CODE");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("CostCenter")
                        .HasColumnType("int")
                        .HasColumnName("COST_CENTER");

                    b.Property<string>("CustSalesNo")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("CUST_SALES_NO");

                    b.Property<string>("ItemUnique")
                        .HasMaxLength(19)
                        .IsUnicode(false)
                        .HasColumnType("varchar(19)")
                        .HasColumnName("ITEM_UNIQUE");

                    b.Property<string>("KeyCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("KEY_CODE");

                    b.Property<string>("SubName")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("SUB_NAME");

                    b.HasKey("CoCode", "SubCode", "MainCode");

                    b.ToTable("ACC_SUB_CODE");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Accounts.AccSubCodeEdit", b =>
                {
                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("SubCodeFr")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE_FR");

                    b.Property<string>("SubCodeTo")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE_TO");

                    b.HasKey("MainCode", "SubCodeFr", "SubCodeTo");

                    b.ToTable("ACC_SUB_CODE_EDIT");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Accounts.AccTransDetail", b =>
                {
                    b.Property<int>("TransDtlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TRANS_DTL_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransDtlId"));

                    b.Property<string>("AccName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ACC_NAME");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("CoCode")
                        .HasColumnType("int")
                        .HasColumnName("CO_CODE");

                    b.Property<string>("CostCenterCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("COST_CENTER_CODE");

                    b.Property<string>("CurCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("CUR_CODE");

                    b.Property<string>("DocCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("DOC_CODE");

                    b.Property<DateTime?>("DocDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("DOC_DATE");

                    b.Property<string>("DocNo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("DOC_NO");

                    b.Property<int?>("DocStatus")
                        .HasColumnType("int")
                        .HasColumnName("DOC_STATUS");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<int?>("EntryType")
                        .HasColumnType("int")
                        .HasColumnName("ENTRY_TYPE");

                    b.Property<int?>("FMonth")
                        .HasColumnType("int")
                        .HasColumnName("F_MONTH");

                    b.Property<int?>("FYear")
                        .HasColumnType("int")
                        .HasColumnName("F_YEAR");

                    b.Property<string>("LineDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("LINE_DESC");

                    b.Property<int?>("MCodeDtl")
                        .HasColumnType("int")
                        .HasColumnName("M_CODE_DTL");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("OkPost")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("OK_POST");

                    b.Property<int?>("PostRecipt")
                        .HasColumnType("int")
                        .HasColumnName("POST_RECIPT");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.Property<DateTime?>("TransDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("TRANS_DATE");

                    b.Property<int>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("TRANS_ID");

                    b.Property<int?>("TransNo")
                        .HasColumnType("int")
                        .HasColumnName("TRANS_NO");

                    b.Property<long?>("TransSerial")
                        .HasColumnType("bigint")
                        .HasColumnName("TRANS_SERIAL");

                    b.Property<string>("TransType")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("TRANS_TYPE");

                    b.Property<int?>("UserCode")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE");

                    b.Property<int?>("UserCodeModify")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE_MODIFY");

                    b.Property<DateTime?>("UserDateModify")
                        .HasColumnType("datetime")
                        .HasColumnName("USER_DATE_MODIFY");

                    b.Property<decimal?>("ValCredit")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("VAL_CREDIT");

                    b.Property<decimal?>("ValCreditCur")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("VAL_CREDIT_CUR");

                    b.Property<decimal?>("ValDep")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("VAL_DEP");

                    b.Property<decimal?>("ValDepCur")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("VAL_DEP_CUR");

                    b.Property<string>("YearTransNo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("YEAR_TRANS_NO");

                    b.HasKey("TransDtlId");

                    b.HasIndex("TransId");

                    b.ToTable("ACC_TRANS_DETAIL");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Accounts.AccTransMaster", b =>
                {
                    b.Property<int>("TransId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TRANS_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransId"));

                    b.Property<DateTime?>("AprDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("APR_DATE");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("CoCode")
                        .HasColumnType("int")
                        .HasColumnName("CO_CODE");

                    b.Property<string>("CurCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("CUR_CODE");

                    b.Property<decimal?>("CurRate")
                        .HasColumnType("decimal(9, 6)")
                        .HasColumnName("CUR_RATE");

                    b.Property<DateTime?>("DocDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("DOC_DATE");

                    b.Property<string>("DocNo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("DOC_NO");

                    b.Property<int?>("DocStatus")
                        .HasColumnType("int")
                        .HasColumnName("DOC_STATUS");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<int?>("FMonth")
                        .HasColumnType("int")
                        .HasColumnName("F_MONTH");

                    b.Property<int?>("FYear")
                        .HasColumnType("int")
                        .HasColumnName("F_YEAR");

                    b.Property<int?>("MCode")
                        .HasColumnType("int")
                        .HasColumnName("M_CODE");

                    b.Property<int?>("MCodeDtl")
                        .HasColumnType("int")
                        .HasColumnName("M_CODE_DTL");

                    b.Property<int?>("MasterId")
                        .HasColumnType("int")
                        .HasColumnName("MASTER_ID");

                    b.Property<string>("OkPost")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("OK_POST");

                    b.Property<int?>("PostRecipt")
                        .HasColumnType("int")
                        .HasColumnName("POST_RECIPT");

                    b.Property<decimal?>("TotalTrans")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("TOTAL_TRANS");

                    b.Property<DateTime?>("TransDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("TRANS_DATE");

                    b.Property<string>("TransDesc")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("TRANS_DESC");

                    b.Property<int?>("TransNo")
                        .HasColumnType("int")
                        .HasColumnName("TRANS_NO");

                    b.Property<string>("TransType")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("TRANS_TYPE");

                    b.Property<int?>("UserCodeModify")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE_MODIFY");

                    b.Property<DateTime?>("UserDateModify")
                        .HasColumnType("datetime")
                        .HasColumnName("USER_DATE_MODIFY");

                    b.Property<string>("YearTransNo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("YEAR_TRANS_NO");

                    b.HasKey("TransId");

                    b.ToTable("ACC_TRANS_MASTER");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Accounts.CostCenter", b =>
                {
                    b.Property<int>("CostCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("COST_CODE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CostCode"));

                    b.Property<string>("CostDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("COST_DESC");

                    b.Property<int?>("CostFlag")
                        .HasColumnType("int")
                        .HasColumnName("COST_FLAG");

                    b.Property<int?>("CostVisible")
                        .HasColumnType("int")
                        .HasColumnName("COST_VISIBLE");

                    b.Property<decimal?>("CreditVal")
                        .HasColumnType("decimal(11, 3)")
                        .HasColumnName("CREDIT_VAL");

                    b.Property<decimal?>("DepitVal")
                        .HasColumnType("decimal(11, 3)")
                        .HasColumnName("DEPIT_VAL");

                    b.Property<int?>("FYear")
                        .HasColumnType("int")
                        .HasColumnName("F_YEAR");

                    b.HasKey("CostCode");

                    b.ToTable("COST_CENTERS");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Accounts.JournalType", b =>
                {
                    b.Property<int>("JournalCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JOURNAL_CODE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JournalCode"));

                    b.Property<string>("CounterFlag")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("COUNTER_FLAG");

                    b.Property<string>("JournalInOut")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("JOURNAL_IN_OUT");

                    b.Property<string>("JournalName")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("JOURNAL_NAME");

                    b.Property<string>("JournalType1")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("JOURNAL_TYPE");

                    b.HasKey("JournalCode");

                    b.ToTable("JOURNAL_TYPE");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Accounts.UserJournalType", b =>
                {
                    b.Property<int>("UserJournalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserJournalId"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("JournalCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("JOURNAL_CODE");

                    b.Property<int?>("UserCode")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE");

                    b.HasKey("UserJournalId");

                    b.HasIndex("JournalCode");

                    b.ToTable("USER_JOURNAL_TYPE");
                });

            modelBuilder.Entity("ProSoft.EF.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DiscountId")
                        .HasColumnType("float")
                        .HasColumnName("DISCOUNT_ID");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("FYear")
                        .HasColumnType("int")
                        .HasColumnName("F_YEAR");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PassConfirm")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PASS_CONFIRM");

                    b.Property<string>("PassWord")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PASS_WORD");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("SideId")
                        .HasColumnType("float")
                        .HasColumnName("SIDE_ID");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UserCode")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE");

                    b.Property<int?>("UserControler")
                        .HasColumnType("int")
                        .HasColumnName("USER_CONTROLER");

                    b.Property<int?>("UserGId")
                        .HasColumnType("int")
                        .HasColumnName("USER_G_ID");

                    b.Property<int?>("UserLang")
                        .HasColumnType("int")
                        .HasColumnName("USER_LANG");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("USER_NAME");

                    b.Property<int?>("UserType")
                        .HasColumnType("int")
                        .HasColumnName("USER_TYPE");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("USERS", (string)null);
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.Analysis.Analdetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("BranchId")
                        .HasColumnType("float")
                        .HasColumnName("BRANCH_ID");

                    b.Property<string>("Codeanalcode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CODEANALCODE");

                    b.Property<double?>("FYear")
                        .HasColumnType("float")
                        .HasColumnName("F_YEAR");

                    b.Property<DateTime?>("Headdate")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("HEADDATE");

                    b.Property<int?>("Itemanalcode")
                        .HasColumnType("int")
                        .HasColumnName("ITEMANALCODE");

                    b.Property<string>("Itemanalname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ITEMANALNAME");

                    b.Property<string>("Itemrate")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("ITEMRATE");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<long?>("MasterId")
                        .HasColumnType("bigint")
                        .HasColumnName("MASTER_ID");

                    b.Property<double?>("PatId")
                        .HasColumnType("float")
                        .HasColumnName("PAT_ID");

                    b.Property<string>("SubCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SUB_CODE");

                    b.HasKey("Id");

                    b.ToTable("ANALDETAIL");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.Analysis.Itemanalysis", b =>
                {
                    b.Property<string>("Codeanalcode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CODEANALCODE");

                    b.Property<int>("Itemanalcode")
                        .HasColumnType("int")
                        .HasColumnName("ITEMANALCODE");

                    b.Property<string>("Subanalcode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SUBANALCODE");

                    b.Property<string>("Itemanalfemalenormal")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ITEMANALFEMALENORMAL");

                    b.Property<string>("Itemanalmalenormal")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ITEMANALMALENORMAL");

                    b.Property<string>("Itemanalname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ITEMANALNAME");

                    b.Property<string>("Itemanalnormalrate")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ITEMANALNORMALRATE");

                    b.Property<string>("Itemanalrate")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ITEMANALRATE");

                    b.Property<short?>("Itemanalunitcode")
                        .HasColumnType("smallint")
                        .HasColumnName("ITEMANALUNITCODE");

                    b.Property<string>("Mainanalcode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAINANALCODE");

                    b.HasKey("Codeanalcode", "Itemanalcode", "Subanalcode");

                    b.ToTable("ITEMANALYSES");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.Analysis.LabUnit", b =>
                {
                    b.Property<short>("LabUnitCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("LAB_UNIT_CODE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("LabUnitCode"));

                    b.Property<string>("LabUnitName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LAB_UNIT_NAME");

                    b.HasKey("LabUnitCode");

                    b.ToTable("LAB_UNITS");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.Analysis.MedicalAnalysisMain", b =>
                {
                    b.Property<double>("CoCode")
                        .HasColumnType("float")
                        .HasColumnName("CO_CODE");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<double?>("CurrentLevel")
                        .HasColumnType("float")
                        .HasColumnName("CURRENT_LEVEL");

                    b.Property<string>("MainName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MAIN_NAME");

                    b.Property<string>("MainSubType")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("MAIN_SUB_TYPE");

                    b.Property<double?>("MedicalFlag")
                        .HasColumnType("float")
                        .HasColumnName("MEDICAL_FLAG");

                    b.Property<string>("ParentCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PARENT_CODE");

                    b.HasKey("CoCode", "MainCode");

                    b.ToTable("MEDICAL_ANALYSIS_MAIN");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.Analysis.MedicalAnalysisSub", b =>
                {
                    b.Property<double>("CoCode")
                        .HasColumnType("float")
                        .HasColumnName("CO_CODE");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.Property<decimal?>("AnalysisCost")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("ANALYSIS_COST");

                    b.Property<decimal?>("AnalysisVal")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("ANALYSIS_VAL");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<double?>("MedicalFlag")
                        .HasColumnType("float")
                        .HasColumnName("MEDICAL_FLAG");

                    b.Property<string>("SubName")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("SUB_NAME");

                    b.Property<string>("SubName2")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("SUB_NAME2");

                    b.HasKey("CoCode", "MainCode", "SubCode");

                    b.ToTable("MEDICAL_ANALYSIS_SUB");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.CheckupClinic", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int>("CheckupId")
                        .HasColumnType("int")
                        .HasColumnName("CHECKUP_ID");

                    b.Property<int>("Flag1")
                        .HasColumnType("int")
                        .HasColumnName("FLAG1");

                    b.Property<string>("CheckupDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CHECKUP_DESC");

                    b.Property<string>("CheckupDesc2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CHECKUP_DESC2");

                    b.HasKey("BranchId", "CheckupId", "Flag1");

                    b.HasIndex(new[] { "BranchId", "CheckupId", "Flag1" }, "PK_CHECKUP_CLINIC_2")
                        .IsUnique();

                    b.ToTable("CHECKUP_CLINIC");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.ClassificationCust", b =>
                {
                    b.Property<int>("ClassificationCust1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CLASSIFICATION_CUST");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassificationCust1"));

                    b.Property<string>("ClassificationDesc")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("CLASSIFICATION_DESC");

                    b.HasKey("ClassificationCust1");

                    b.ToTable("CLASSIFICATION_CUST");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.ClinicTran", b =>
                {
                    b.Property<int>("CheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CHECK_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckId"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime")
                        .HasColumnName("APPROVAL_DATE");

                    b.Property<int?>("ApprovalPeriod")
                        .HasColumnType("int")
                        .HasColumnName("APPROVAL_PERIOD");

                    b.Property<int?>("AttendanceSer")
                        .HasColumnType("int")
                        .HasColumnName("ATTENDANCE_SER");

                    b.Property<string>("BeneficiaryName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("BENEFICIARY_NAME");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("CheckIdCancel")
                        .HasColumnType("int")
                        .HasColumnName("CHECK_ID_CANCEL");

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("CLINIC_ID");

                    b.Property<int?>("CompId")
                        .HasColumnType("int")
                        .HasColumnName("COMP_ID");

                    b.Property<int?>("CompIdDtl")
                        .HasColumnType("int")
                        .HasColumnName("COMP_ID_DTL");

                    b.Property<decimal?>("CompValue")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("COMP_VALUE");

                    b.Property<DateTime?>("ConvDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CONV_DATE");

                    b.Property<decimal?>("CostPrice")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("COST_PRICE");

                    b.Property<int?>("Counter")
                        .HasColumnType("int")
                        .HasColumnName("COUNTER");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int?>("CshOrdNum")
                        .HasColumnType("int")
                        .HasColumnName("CSH_ORD_NUM");

                    b.Property<DateTime?>("DateAnalysis")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE_ANALYSIS");

                    b.Property<int?>("Deal")
                        .HasColumnType("int")
                        .HasColumnName("DEAL");

                    b.Property<decimal?>("DiscountVal")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("DISCOUNT_VAL");

                    b.Property<int?>("DocNo")
                        .HasColumnType("int")
                        .HasColumnName("DOC_NO");

                    b.Property<int?>("DrAlalysis")
                        .HasColumnType("int")
                        .HasColumnName("DR_ALALYSIS");

                    b.Property<int?>("DrCode")
                        .HasColumnType("int")
                        .HasColumnName("DR_CODE");

                    b.Property<int?>("DrCodeConerter")
                        .HasColumnType("int")
                        .HasColumnName("DR_CODE_CONERTER");

                    b.Property<decimal?>("DrDueVal")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("DR_DUE_VAL");

                    b.Property<int?>("DrSend")
                        .HasColumnType("int")
                        .HasColumnName("DR_SEND");

                    b.Property<decimal?>("DrSendVal")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("DR_SEND_VAL");

                    b.Property<decimal?>("DrVal")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("DR_VAL");

                    b.Property<decimal?>("DrValPat")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("DR_VAL_PAT");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<int?>("EntryStatus")
                        .HasColumnType("int")
                        .HasColumnName("ENTRY_STATUS");

                    b.Property<DateTime?>("ExDate")
                        .HasColumnType("datetime")
                        .HasColumnName("EX_DATE");

                    b.Property<string>("ExDay")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("EX_DAY");

                    b.Property<int?>("ExInvoiceNo")
                        .HasColumnType("int")
                        .HasColumnName("EX_INVOICE_NO");

                    b.Property<int?>("ExMonth")
                        .HasColumnType("int")
                        .HasColumnName("EX_MONTH");

                    b.Property<int?>("ExPeriod")
                        .HasColumnType("int")
                        .HasColumnName("EX_PERIOD");

                    b.Property<int?>("ExYear")
                        .HasColumnType("int")
                        .HasColumnName("EX_YEAR");

                    b.Property<int?>("ExchangeType")
                        .HasColumnType("int")
                        .HasColumnName("EXCHANGE_TYPE");

                    b.Property<decimal?>("ExtraVal")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("EXTRA_VAL");

                    b.Property<decimal?>("ExtraVal2")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("EXTRA_VAL2");

                    b.Property<int?>("Flag")
                        .HasColumnType("int")
                        .HasColumnName("FLAG");

                    b.Property<int?>("Flag1")
                        .HasColumnType("int")
                        .HasColumnName("FLAG1");

                    b.Property<int?>("FlagDrDisc")
                        .HasColumnType("int")
                        .HasColumnName("FLAG_DR_DISC");

                    b.Property<decimal?>("HoVal")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("HO_VAL");

                    b.Property<decimal?>("HoValPat")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("HO_VAL_PAT");

                    b.Property<int?>("IncomingFr")
                        .HasColumnType("int")
                        .HasColumnName("INCOMING_FR");

                    b.Property<string>("ItemMaster")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ITEM_MASTER");

                    b.Property<int?>("ItemVisible")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_VISIBLE");

                    b.Property<string>("ItmBarcode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ITM_BARCODE");

                    b.Property<int?>("ItmServFlag")
                        .HasColumnType("int")
                        .HasColumnName("ITM_SERV_FLAG");

                    b.Property<int?>("Kinship")
                        .HasColumnType("int")
                        .HasColumnName("KINSHIP");

                    b.Property<short?>("KnowUsFr")
                        .HasColumnType("smallint")
                        .HasColumnName("KNOW_US_FR");

                    b.Property<int?>("Machine")
                        .HasColumnType("int")
                        .HasColumnName("MACHINE");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<int?>("MainId")
                        .HasColumnType("int")
                        .HasColumnName("MAIN_ID");

                    b.Property<long?>("MainInvNo")
                        .HasColumnType("bigint")
                        .HasColumnName("MAIN_INV_NO");

                    b.Property<int?>("MainInvNoAll")
                        .HasColumnType("int")
                        .HasColumnName("MAIN_INV_NO_ALL");

                    b.Property<int?>("MainInvNoTax")
                        .HasColumnType("int")
                        .HasColumnName("MAIN_INV_NO_TAX");

                    b.Property<int?>("MainInvTot")
                        .HasColumnType("int")
                        .HasColumnName("MAIN_INV_TOT");

                    b.Property<int?>("MasterId")
                        .HasColumnType("int")
                        .HasColumnName("MASTER_ID");

                    b.Property<decimal?>("MchHours")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("MCH_HOURS");

                    b.Property<DateTime?>("ModifyDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFY_DATE_TIME");

                    b.Property<int?>("Nerse1")
                        .HasColumnType("int")
                        .HasColumnName("NERSE1");

                    b.Property<int?>("Nerse2")
                        .HasColumnType("int")
                        .HasColumnName("NERSE2");

                    b.Property<DateTime?>("PatAdDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PAT_AD_DATE");

                    b.Property<int?>("PatEmerg")
                        .HasColumnType("int")
                        .HasColumnName("PAT_EMERG");

                    b.Property<int?>("PatExternal")
                        .HasColumnType("int")
                        .HasColumnName("PAT_EXTERNAL");

                    b.Property<int?>("PatId")
                        .HasColumnType("int")
                        .HasColumnName("PAT_ID");

                    b.Property<int?>("PatIdSection")
                        .HasColumnType("int")
                        .HasColumnName("PAT_ID_SECTION");

                    b.Property<decimal?>("PatPerc")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("PAT_PERC");

                    b.Property<string>("PatPharName")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("PAT_PHAR_NAME");

                    b.Property<int?>("PatSer")
                        .HasColumnType("int")
                        .HasColumnName("PAT_SER");

                    b.Property<int?>("PatStatus")
                        .HasColumnType("int")
                        .HasColumnName("PAT_STATUS");

                    b.Property<DateTime?>("PatTime")
                        .HasColumnType("datetime")
                        .HasColumnName("PAT_TIME");

                    b.Property<decimal?>("PatientValue")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("PATIENT_VALUE");

                    b.Property<int?>("PipeFlag")
                        .HasColumnType("int")
                        .HasColumnName("PIPE_FLAG");

                    b.Property<int?>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("POST_ID");

                    b.Property<int?>("ProcedureId")
                        .HasColumnType("int")
                        .HasColumnName("PROCEDURE_ID");

                    b.Property<int?>("Qty")
                        .HasColumnType("int")
                        .HasColumnName("QTY");

                    b.Property<int?>("ReceptEmpCode")
                        .HasColumnType("int")
                        .HasColumnName("RECEPT_EMP_CODE");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.Property<int?>("ReserveFlag")
                        .HasColumnType("int")
                        .HasColumnName("RESERVE_FLAG");

                    b.Property<int?>("SClinicId")
                        .HasColumnType("int")
                        .HasColumnName("S_CLINIC_ID");

                    b.Property<decimal?>("SalsePrice")
                        .HasColumnType("decimal(12, 3)")
                        .HasColumnName("SALSE_PRICE");

                    b.Property<int?>("SendFr")
                        .HasColumnType("int")
                        .HasColumnName("SEND_FR");

                    b.Property<int?>("SendTo")
                        .HasColumnType("int")
                        .HasColumnName("SEND_TO");

                    b.Property<int?>("SerSys")
                        .HasColumnType("int")
                        .HasColumnName("SER_SYS");

                    b.Property<int?>("Serial")
                        .HasColumnType("int")
                        .HasColumnName("SERIAL");

                    b.Property<int?>("SeriviceWithItems")
                        .HasColumnType("int")
                        .HasColumnName("SERIVICE_WITH_ITEMS");

                    b.Property<int?>("ServId")
                        .HasColumnType("int")
                        .HasColumnName("SERV_ID");

                    b.Property<int?>("SessionNo")
                        .HasColumnType("int")
                        .HasColumnName("SESSION_NO");

                    b.Property<int?>("SpecificCode")
                        .HasColumnType("int")
                        .HasColumnName("SPECIFIC_CODE");

                    b.Property<int?>("StockCode")
                        .HasColumnType("int")
                        .HasColumnName("STOCK_CODE");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.Property<int?>("SubId")
                        .HasColumnType("int")
                        .HasColumnName("SUB_ID");

                    b.Property<string>("SupCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUP_CODE");

                    b.Property<int?>("TransType")
                        .HasColumnType("int")
                        .HasColumnName("TRANS_TYPE");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("UNIT_PRICE");

                    b.Property<int?>("UserApproval")
                        .HasColumnType("int")
                        .HasColumnName("USER_APPROVAL");

                    b.Property<int?>("UserCodeCreate")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE_CREATE");

                    b.Property<int?>("UserCodeModify")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE_MODIFY");

                    b.Property<int?>("UserSafe")
                        .HasColumnType("int")
                        .HasColumnName("USER_SAFE");

                    b.Property<decimal?>("ValueService")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("VALUE_SERVICE");

                    b.Property<int?>("VistConfirm")
                        .HasColumnType("int")
                        .HasColumnName("VIST_CONFIRM");

                    b.Property<int?>("WaitConv")
                        .HasColumnType("int")
                        .HasColumnName("WAIT_CONV");

                    b.Property<DateTime?>("WaitDate")
                        .HasColumnType("datetime")
                        .HasColumnName("WAIT_DATE");

                    b.Property<int?>("WaitOther")
                        .HasColumnType("int")
                        .HasColumnName("WAIT_OTHER");

                    b.Property<int?>("WaitReson")
                        .HasColumnType("int")
                        .HasColumnName("WAIT_RESON");

                    b.Property<int?>("WaitStatus")
                        .HasColumnType("int")
                        .HasColumnName("WAIT_STATUS");

                    b.HasKey("CheckId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DrSend");

                    b.HasIndex("MainId");

                    b.HasIndex("MasterId");

                    b.HasIndex("SClinicId");

                    b.HasIndex("ServId");

                    b.HasIndex("SubId");

                    b.ToTable("CLINIC_TRANS");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.Company", b =>
                {
                    b.Property<int>("CompId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("COMP_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompId"));

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<string>("ComAdd")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COM_ADD");

                    b.Property<string>("ComType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COM_TYPE");

                    b.Property<string>("CompEMail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMP_E_MAIL");

                    b.Property<string>("CompFax")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("COMP_FAX");

                    b.Property<string>("CompName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMP_NAME");

                    b.Property<decimal?>("CompPer")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("COMP_PER");

                    b.Property<string>("CompTelephone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("COMP_TELEPHONE");

                    b.Property<int?>("CompanyOnOff")
                        .HasColumnType("int")
                        .HasColumnName("COMPANY_ON_OFF");

                    b.Property<decimal?>("CompanyType")
                        .HasColumnType("decimal(38, 0)")
                        .HasColumnName("COMPANY_TYPE");

                    b.Property<string>("EInvMainFlg")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("E_INV_MAIN_FLG");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GROUP_ID");

                    b.Property<string>("InsurancePeriod")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("INSURANCE_PERIOD");

                    b.Property<int?>("KindStore")
                        .HasColumnType("int")
                        .HasColumnName("KIND_STORE");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("MedicalManager")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MEDICAL_MANAGER");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFY_DATE");

                    b.Property<int?>("OpPl")
                        .HasColumnType("int")
                        .HasColumnName("OP_PL");

                    b.Property<int?>("PLId")
                        .HasColumnType("int")
                        .HasColumnName("P_L_ID");

                    b.Property<int?>("PLRCode")
                        .HasColumnType("int")
                        .HasColumnName("P_L_R_CODE");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.Property<string>("ResponsableManager")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("RESPONSABLE_MANAGER");

                    b.Property<decimal?>("Stamp")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("STAMP");

                    b.Property<decimal?>("StampPer")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("STAMP_PER");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.Property<string>("TaxNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TAX_NO");

                    b.Property<decimal?>("TaxPer")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("TAX_PER");

                    b.Property<int?>("UserCreate")
                        .HasColumnType("int")
                        .HasColumnName("USER_CREATE");

                    b.Property<int?>("UserModify")
                        .HasColumnType("int")
                        .HasColumnName("USER_MODIFY");

                    b.HasKey("CompId");

                    b.HasIndex("GroupId");

                    b.HasIndex("KindStore");

                    b.HasIndex("PLId");

                    b.ToTable("COMPANY");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.CompanyDtl", b =>
                {
                    b.Property<int>("CompIdDtl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("COMP_ID_DTL");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompIdDtl"));

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int>("CompId")
                        .HasColumnType("int")
                        .HasColumnName("COMP_ID");

                    b.Property<int?>("CompIdDtlOnOff")
                        .HasColumnType("int")
                        .HasColumnName("COMP_ID_DTL_ON_OFF");

                    b.Property<string>("CompNameDtl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMP_NAME_DTL");

                    b.Property<int?>("EinvType")
                        .HasColumnType("int")
                        .HasColumnName("EINV_TYPE");

                    b.Property<DateOnly?>("EntryDate")
                        .HasColumnType("date")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<DateOnly?>("ModifyDate")
                        .HasColumnType("date")
                        .HasColumnName("MODIFY_DATE");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.Property<string>("TaxNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TAX_NO");

                    b.Property<int?>("UserCreate")
                        .HasColumnType("int")
                        .HasColumnName("USER_CREATE");

                    b.Property<int?>("UserModify")
                        .HasColumnType("int")
                        .HasColumnName("USER_MODIFY");

                    b.Property<string>("WinvItemsFlg")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("WINV_ITEMS_FLG");

                    b.HasKey("CompIdDtl");

                    b.HasIndex("CompId");

                    b.ToTable("COMPANY_DTL");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.CompanyGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GROUP_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("CompGroupOnOff")
                        .HasColumnType("int")
                        .HasColumnName("COMP_GROUP_ON_OFF");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("GROUP_NAME");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.HasKey("GroupId");

                    b.ToTable("COMPANY_GROUP");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.Deposit", b =>
                {
                    b.Property<int>("DpsSer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DPS_SER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DpsSer"));

                    b.Property<string>("BankId")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("BANK_ID");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("CashNo")
                        .HasColumnType("int")
                        .HasColumnName("CASH_NO");

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CHECK_DATE");

                    b.Property<string>("CheckNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CHECK_NO");

                    b.Property<string>("DepositDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("DEPOSIT_DESC");

                    b.Property<DateTime?>("DpsDate")
                        .HasColumnType("datetime")
                        .HasColumnName("DPS_DATE");

                    b.Property<int?>("DpsType")
                        .HasColumnType("int")
                        .HasColumnName("DPS_TYPE");

                    b.Property<decimal?>("DpsVal")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("DPS_VAL");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<int?>("ExchangeType")
                        .HasColumnType("int")
                        .HasColumnName("EXCHANGE_TYPE");

                    b.Property<int?>("FYear")
                        .HasColumnType("int")
                        .HasColumnName("F_YEAR");

                    b.Property<int?>("JorKiedNo")
                        .HasColumnType("int")
                        .HasColumnName("JOR_KIED_NO");

                    b.Property<int?>("MasterId")
                        .HasColumnType("int")
                        .HasColumnName("MASTER_ID");

                    b.Property<int?>("ModId")
                        .HasColumnType("int")
                        .HasColumnName("MOD_ID");

                    b.Property<DateTime?>("ModfyDate")
                        .HasColumnType("datetime")
                        .HasColumnName("MODFY_DATE");

                    b.Property<int?>("PatId")
                        .HasColumnType("int")
                        .HasColumnName("PAT_ID");

                    b.Property<int?>("PostRecipt")
                        .HasColumnType("int")
                        .HasColumnName("POST_RECIPT");

                    b.Property<int?>("PostUser")
                        .HasColumnType("int")
                        .HasColumnName("POST_USER");

                    b.Property<int?>("SafeDocNo")
                        .HasColumnType("int")
                        .HasColumnName("SAFE_DOC_NO");

                    b.Property<int?>("UserCode")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE");

                    b.Property<int?>("UserModify")
                        .HasColumnType("int")
                        .HasColumnName("USER_MODIFY");

                    b.HasKey("DpsSer");

                    b.ToTable("DEPOSIT");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.DocSubDtl", b =>
                {
                    b.Property<int>("DocSubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DOC_SUB_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocSubId"));

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("CLINIC_ID");

                    b.Property<int?>("DocSubDef")
                        .HasColumnType("int")
                        .HasColumnName("DOC_SUB_DEF");

                    b.Property<int?>("DrId")
                        .HasColumnType("int")
                        .HasColumnName("DR_ID");

                    b.Property<int?>("DrOnOff")
                        .HasColumnType("int")
                        .HasColumnName("DR_ON_OFF");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<int?>("Flag")
                        .HasColumnType("int")
                        .HasColumnName("FLAG");

                    b.Property<int?>("SClinicId")
                        .HasColumnType("int")
                        .HasColumnName("S_CLINIC_ID");

                    b.Property<int?>("UserCreate")
                        .HasColumnType("int")
                        .HasColumnName("USER_CREATE");

                    b.Property<int?>("UserModify")
                        .HasColumnType("int")
                        .HasColumnName("USER_MODIFY");

                    b.HasKey("DocSubId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DrId");

                    b.HasIndex("SClinicId");

                    b.ToTable("DOC_SUB_DTL");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.Doctor", b =>
                {
                    b.Property<int>("DrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DR_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrId"));

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("CLINIC_ID");

                    b.Property<int?>("ContractTyp")
                        .HasColumnType("int")
                        .HasColumnName("CONTRACT_TYP");

                    b.Property<string>("DrAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DR_ADDRESS");

                    b.Property<int?>("DrDegree")
                        .HasColumnType("int")
                        .HasColumnName("DR_DEGREE");

                    b.Property<string>("DrDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DR_DESC");

                    b.Property<int?>("DrOnOff")
                        .HasColumnType("int")
                        .HasColumnName("DR_ON_OFF");

                    b.Property<int?>("DrType")
                        .HasColumnType("int")
                        .HasColumnName("DR_TYPE");

                    b.Property<int?>("JopTyp")
                        .HasColumnType("int")
                        .HasColumnName("JOP_TYP");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("OtherDesc")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("OTHER_DESC");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.Property<int?>("SClinicId")
                        .HasColumnType("int")
                        .HasColumnName("S_CLINIC_ID");

                    b.Property<int?>("Shareholder")
                        .HasColumnType("int")
                        .HasColumnName("SHAREHOLDER");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.Property<int?>("Taxable")
                        .HasColumnType("int")
                        .HasColumnName("TAXABLE");

                    b.Property<string>("TelNo1")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("TEL_NO1");

                    b.Property<string>("TelNo2")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("TEL_NO2");

                    b.Property<decimal?>("VisitVal")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("VISIT_VAL");

                    b.Property<int?>("VisitorPerDay")
                        .HasColumnType("int")
                        .HasColumnName("VISITOR_PER_DAY");

                    b.HasKey("DrId");

                    b.HasIndex("DrDegree");

                    b.ToTable("DOCTORS");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.DoctorsPercent", b =>
                {
                    b.Property<int>("DrPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DR_PERCENT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrPercent"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("DrCode")
                        .HasColumnType("int")
                        .HasColumnName("DR_CODE");

                    b.Property<int?>("DrPerc")
                        .HasColumnType("int")
                        .HasColumnName("DR_PERC");

                    b.Property<decimal?>("DrPercContract")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("DR_PERC_CONTRACT");

                    b.Property<decimal?>("DrVal")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("DR_VAL");

                    b.Property<decimal?>("DrValContract")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("DR_VAL_CONTRACT");

                    b.Property<int?>("DrValFlg")
                        .HasColumnType("int")
                        .HasColumnName("DR_VAL_FLG");

                    b.Property<int?>("MainCode")
                        .HasColumnType("int")
                        .HasColumnName("MAIN_CODE");

                    b.Property<int?>("SrvFlag")
                        .HasColumnType("int")
                        .HasColumnName("SRV_FLAG");

                    b.Property<int?>("SubCode")
                        .HasColumnType("int")
                        .HasColumnName("SUB_CODE");

                    b.Property<int?>("SubDetailCodeL1")
                        .HasColumnType("int")
                        .HasColumnName("SUB_DETAIL_CODE_L1");

                    b.Property<decimal?>("ValueService")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("VALUE_SERVICE");

                    b.HasKey("DrPercent");

                    b.HasIndex("DrCode");

                    b.HasIndex("SubCode");

                    b.HasIndex("SubDetailCodeL1");

                    b.ToTable("DOCTORS_PERCENT");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.DrDegree", b =>
                {
                    b.Property<int>("DegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DEGREE_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DegreeId"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<string>("DegreeDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DEGREE_DESC");

                    b.Property<decimal?>("DrPerc")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("DR_PERC");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.HasKey("DegreeId");

                    b.ToTable("DR_DEGREE");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.Drtimsheet", b =>
                {
                    b.Property<int?>("DrTimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DR_TIM_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("DrTimId"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("DayNumber")
                        .HasColumnType("int")
                        .HasColumnName("DAY_NUMBER");

                    b.Property<int?>("DrId")
                        .HasColumnType("int")
                        .HasColumnName("DR_ID");

                    b.Property<int?>("ExPeriod")
                        .HasColumnType("int")
                        .HasColumnName("EX_PERIOD");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.Property<DateTime?>("Timfrom")
                        .HasColumnType("datetime")
                        .HasColumnName("TIMFROM");

                    b.Property<DateTime?>("Timto")
                        .HasColumnType("datetime")
                        .HasColumnName("TIMTO");

                    b.HasKey("DrTimId");

                    b.ToTable("DRTIMSHEET");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.EisSectionType", b =>
                {
                    b.Property<int>("SecCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SEC_CODE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecCode"));

                    b.Property<int?>("CshOrdFlag")
                        .HasColumnType("int")
                        .HasColumnName("CSH_ORD_FLAG");

                    b.Property<int?>("Flg")
                        .HasColumnType("int")
                        .HasColumnName("FLG");

                    b.Property<string>("ObjName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("OBJ_NAME");

                    b.Property<string>("ObjPharm1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("OBJ_PHARM1");

                    b.Property<string>("ObjPharm2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("OBJ_PHARM2");

                    b.Property<string>("SecName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SEC_NAME");

                    b.Property<int?>("SecOnOff")
                        .HasColumnType("int")
                        .HasColumnName("SEC_ON_OFF");

                    b.HasKey("SecCode");

                    b.ToTable("EIS_SECTION_TYPES");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.MainClinic", b =>
                {
                    b.Property<int>("ClinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CLINIC_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClinicId"));

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<string>("ClinicDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CLINIC_DESC");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<int?>("Flag")
                        .HasColumnType("int")
                        .HasColumnName("FLAG");

                    b.Property<int?>("FlagN")
                        .HasColumnType("int")
                        .HasColumnName("FLAG_N");

                    b.Property<int?>("MOnOff")
                        .HasColumnType("int")
                        .HasColumnName("M_ON_OFF");

                    b.Property<DateTime?>("ModfyDate")
                        .HasColumnType("datetime")
                        .HasColumnName("MODFY_DATE");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.Property<int?>("SysSection")
                        .HasColumnType("int")
                        .HasColumnName("SYS_SECTION");

                    b.Property<int?>("UserEntry")
                        .HasColumnType("int")
                        .HasColumnName("USER_ENTRY");

                    b.Property<int?>("UserModify")
                        .HasColumnType("int")
                        .HasColumnName("USER_MODIFY");

                    b.HasKey("ClinicId");

                    b.HasIndex("SysSection");

                    b.ToTable("MAIN_CLINIC");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.Pat", b =>
                {
                    b.Property<int>("PatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PAT_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatId"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime")
                        .HasColumnName("BIRTH_DATE");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<double?>("BranchId")
                        .HasColumnType("float")
                        .HasColumnName("BRANCH_ID");

                    b.Property<string>("DocCompNr")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("DOC_COMP_NR");

                    b.Property<string>("DocPatNr")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("DOC_PAT_NR");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<double?>("EntryNo")
                        .HasColumnType("float")
                        .HasColumnName("ENTRY_NO");

                    b.Property<DateTime?>("EntryTime")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_TIME");

                    b.Property<string>("FinanceId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("FINANCE_ID");

                    b.Property<double?>("IdType")
                        .HasColumnType("float")
                        .HasColumnName("ID_TYPE");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int")
                        .HasColumnName("MARITAL_STATUS");

                    b.Property<double?>("NationalityId")
                        .HasColumnType("float")
                        .HasColumnName("NATIONALITY_ID");

                    b.Property<double?>("NewOld")
                        .HasColumnType("float")
                        .HasColumnName("NEW_OLD");

                    b.Property<string>("PCrt")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("P_CRT");

                    b.Property<string>("PDep")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("P_DEP");

                    b.Property<string>("PGroup")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("P_GROUP");

                    b.Property<string>("PatAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PAT_ADDRESS");

                    b.Property<double?>("PatAgeType")
                        .HasColumnType("float")
                        .HasColumnName("PAT_AGE_TYPE");

                    b.Property<DateTime?>("PatDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PAT_DATE");

                    b.Property<string>("PatEmail")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("PAT_EMAIL");

                    b.Property<string>("PatHospital")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAT_HOSPITAL");

                    b.Property<double?>("PatIdCard")
                        .HasColumnType("float")
                        .HasColumnName("PAT_ID_CARD");

                    b.Property<long?>("PatIdSer")
                        .HasColumnType("bigint")
                        .HasColumnName("PAT_ID_SER");

                    b.Property<string>("PatJob")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PAT_JOB");

                    b.Property<string>("PatMobile")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("PAT_MOBILE");

                    b.Property<string>("PatName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PAT_NAME");

                    b.Property<string>("PatPassword")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("PAT_PASSWORD");

                    b.Property<double?>("PatRepeat")
                        .HasColumnType("float")
                        .HasColumnName("PAT_REPEAT");

                    b.Property<string>("PatSector")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAT_SECTOR");

                    b.Property<string>("PatTel")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("PAT_TEL");

                    b.Property<double?>("PersonKind")
                        .HasColumnType("float")
                        .HasColumnName("PERSON_KIND");

                    b.Property<string>("PersonalId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PERSONAL_ID");

                    b.Property<double?>("ReligionId")
                        .HasColumnType("float")
                        .HasColumnName("RELIGION_ID");

                    b.Property<double?>("Replcate")
                        .HasColumnType("float")
                        .HasColumnName("REPLCATE");

                    b.Property<double?>("SheetNo")
                        .HasColumnType("float")
                        .HasColumnName("SHEET_NO");

                    b.Property<double?>("UserCode")
                        .HasColumnType("float")
                        .HasColumnName("USER_CODE");

                    b.Property<double?>("YoungDay")
                        .HasColumnType("float")
                        .HasColumnName("YOUNG_DAY");

                    b.Property<double?>("YoungMonth")
                        .HasColumnType("float")
                        .HasColumnName("YOUNG_MONTH");

                    b.HasKey("PatId");

                    b.ToTable("PAT");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.PatAdmission", b =>
                {
                    b.Property<int>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MASTER_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MasterId"));

                    b.Property<long?>("AccTransNo")
                        .HasColumnType("bigint")
                        .HasColumnName("ACC_TRANS_NO");

                    b.Property<long?>("AccTransNo2")
                        .HasColumnType("bigint")
                        .HasColumnName("ACC_TRANS_NO2");

                    b.Property<decimal?>("AccTransType")
                        .HasColumnType("decimal(38, 0)")
                        .HasColumnName("ACC_TRANS_TYPE");

                    b.Property<decimal?>("Amanat")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("AMANAT");

                    b.Property<decimal?>("AmanatRet")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("AMANAT_RET");

                    b.Property<decimal?>("AmanatRetPat")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("AMANAT_RET_PAT");

                    b.Property<string>("Arch")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ARCH");

                    b.Property<string>("BeneficiaryName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("BENEFICIARY_NAME");

                    b.Property<int?>("BookRoom")
                        .HasColumnType("int")
                        .HasColumnName("BOOK_ROOM");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<decimal?>("BranchId")
                        .HasColumnType("decimal(38, 0)")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("BrnachInitial")
                        .HasColumnType("int")
                        .HasColumnName("BRNACH_INITIAL");

                    b.Property<int?>("CashNo")
                        .HasColumnType("int")
                        .HasColumnName("CASH_NO");

                    b.Property<string>("CoName2")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("CO_NAME_2");

                    b.Property<int?>("CompId")
                        .HasColumnType("int")
                        .HasColumnName("COMP_ID");

                    b.Property<int?>("CompIdDtl")
                        .HasColumnType("int")
                        .HasColumnName("COMP_ID_DTL");

                    b.Property<decimal?>("CompValue")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("COMP_VALUE");

                    b.Property<decimal?>("DaysNo")
                        .HasColumnType("decimal(38, 0)")
                        .HasColumnName("DAYS_NO");

                    b.Property<decimal?>("DaysValue")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("DAYS_VALUE");

                    b.Property<decimal?>("Deal")
                        .HasColumnType("decimal(38, 0)")
                        .HasColumnName("DEAL");

                    b.Property<string>("DecisionSheet")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DECISION_SHEET");

                    b.Property<decimal?>("DiscountVal")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("DISCOUNT_VAL");

                    b.Property<int?>("DrCode")
                        .HasColumnType("int")
                        .HasColumnName("DR_CODE");

                    b.Property<decimal?>("DrObtain")
                        .HasColumnType("decimal(38, 0)")
                        .HasColumnName("DR_OBTAIN");

                    b.Property<int?>("DrSend")
                        .HasColumnType("int")
                        .HasColumnName("DR_SEND");

                    b.Property<decimal?>("DrTax")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("DR_TAX");

                    b.Property<decimal?>("DrVal")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("DR_VAL");

                    b.Property<decimal?>("DueVal")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("DUE_VAL");

                    b.Property<string>("EInvId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("E_INV_ID");

                    b.Property<string>("EInvSts")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("E_INV_STS");

                    b.Property<DateTime?>("EinvDate")
                        .HasColumnType("datetime")
                        .HasColumnName("EINV_DATE");

                    b.Property<string>("EinvErr")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("EINV_ERR");

                    b.Property<decimal?>("EnayaTot")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("ENAYA_TOT");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<decimal?>("ExMonth")
                        .HasColumnType("decimal(38, 0)")
                        .HasColumnName("EX_MONTH");

                    b.Property<int?>("ExMonthTo")
                        .HasColumnType("int")
                        .HasColumnName("EX_MONTH_TO");

                    b.Property<decimal?>("ExYear")
                        .HasColumnType("decimal(38, 0)")
                        .HasColumnName("EX_YEAR");

                    b.Property<int?>("ExYearTo")
                        .HasColumnType("int")
                        .HasColumnName("EX_YEAR_TO");

                    b.Property<decimal?>("ExchangeType")
                        .HasColumnType("decimal(38, 0)")
                        .HasColumnName("EXCHANGE_TYPE");

                    b.Property<decimal?>("ExtraVal")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("EXTRA_VAL");

                    b.Property<decimal?>("ExtraVal2")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("EXTRA_VAL2");

                    b.Property<string>("FinanceId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("FINANCE_ID");

                    b.Property<decimal?>("Flag")
                        .HasColumnType("decimal(38, 0)")
                        .HasColumnName("FLAG");

                    b.Property<int?>("InvType")
                        .HasColumnType("int")
                        .HasColumnName("INV_TYPE");

                    b.Property<int?>("InvTypeTax")
                        .HasColumnType("int")
                        .HasColumnName("INV_TYPE_TAX");

                    b.Property<int?>("JorKiedNo1")
                        .HasColumnType("int")
                        .HasColumnName("JOR_KIED_NO1");

                    b.Property<int?>("JorKiedNo2")
                        .HasColumnType("int")
                        .HasColumnName("JOR_KIED_NO2");

                    b.Property<int?>("JorKiedNo3")
                        .HasColumnType("int")
                        .HasColumnName("JOR_KIED_NO3");

                    b.Property<decimal?>("KastaraTot")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("KASTARA_TOT");

                    b.Property<int?>("Kinship")
                        .HasColumnType("int")
                        .HasColumnName("KINSHIP");

                    b.Property<short?>("KnowUsFr")
                        .HasColumnType("smallint")
                        .HasColumnName("KNOW_US_FR");

                    b.Property<int?>("MCode")
                        .HasColumnType("int")
                        .HasColumnName("M_CODE");

                    b.Property<int?>("MCodeDtl")
                        .HasColumnType("int")
                        .HasColumnName("M_CODE_DTL");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("MainInvDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("MAIN_INV_DESC");

                    b.Property<int?>("MainInvNo")
                        .HasColumnType("int")
                        .HasColumnName("MAIN_INV_NO");

                    b.Property<int?>("MainInvNoAll")
                        .HasColumnType("int")
                        .HasColumnName("MAIN_INV_NO_ALL");

                    b.Property<int?>("MainInvNoTax")
                        .HasColumnType("int")
                        .HasColumnName("MAIN_INV_NO_TAX");

                    b.Property<decimal?>("MainInvTot")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("MAIN_INV_TOT");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOTE");

                    b.Property<int?>("OperationCode")
                        .HasColumnType("int")
                        .HasColumnName("OPERATION_CODE");

                    b.Property<int?>("OperationType")
                        .HasColumnType("int")
                        .HasColumnName("OPERATION_TYPE");

                    b.Property<string>("PCrt")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("P_CRT");

                    b.Property<string>("PDep")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("P_DEP");

                    b.Property<string>("PGroup")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("P_GROUP");

                    b.Property<DateTime?>("PatAdDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PAT_AD_DATE");

                    b.Property<DateTime?>("PatAdTime")
                        .HasColumnType("datetime")
                        .HasColumnName("PAT_AD_TIME");

                    b.Property<decimal?>("PatCardId")
                        .HasColumnType("decimal(38, 0)")
                        .HasColumnName("PAT_CARD_ID");

                    b.Property<int?>("PatClose")
                        .HasColumnType("int")
                        .HasColumnName("PAT_CLOSE");

                    b.Property<DateTime?>("PatDateExit")
                        .HasColumnType("datetime")
                        .HasColumnName("PAT_DATE_EXIT");

                    b.Property<DateTime?>("PatDateOut")
                        .HasColumnType("datetime")
                        .HasColumnName("PAT_DATE_OUT");

                    b.Property<decimal?>("PatEmergency")
                        .HasColumnType("decimal(38, 0)")
                        .HasColumnName("PAT_EMERGENCY");

                    b.Property<decimal?>("PatExit")
                        .HasColumnType("decimal(38, 0)")
                        .HasColumnName("PAT_EXIT");

                    b.Property<decimal?>("PatExternal")
                        .HasColumnType("decimal(38, 0)")
                        .HasColumnName("PAT_EXTERNAL");

                    b.Property<int?>("PatFr")
                        .HasColumnType("int")
                        .HasColumnName("PAT_FR");

                    b.Property<int?>("PatId")
                        .HasColumnType("int")
                        .HasColumnName("PAT_ID");

                    b.Property<int?>("PatIdSection")
                        .HasColumnType("int")
                        .HasColumnName("PAT_ID_SECTION");

                    b.Property<decimal?>("PatInternal")
                        .HasColumnType("decimal(38, 0)")
                        .HasColumnName("PAT_INTERNAL");

                    b.Property<decimal?>("PatRelationship")
                        .HasColumnType("decimal(38, 0)")
                        .HasColumnName("PAT_RELATIONSHIP");

                    b.Property<decimal?>("PatientValue")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("PATIENT_VALUE");

                    b.Property<int?>("PayFlag")
                        .HasColumnType("int")
                        .HasColumnName("PAY_FLAG");

                    b.Property<decimal?>("PayPatTot")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("PAY_PAT_TOT");

                    b.Property<decimal?>("PostId")
                        .HasColumnType("decimal(38, 0)")
                        .HasColumnName("POST_ID");

                    b.Property<decimal?>("Prepaid")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("PREPAID");

                    b.Property<int?>("ProcedureId")
                        .HasColumnType("int")
                        .HasColumnName("PROCEDURE_ID");

                    b.Property<decimal?>("Replcate")
                        .HasColumnType("decimal(38, 0)")
                        .HasColumnName("REPLCATE");

                    b.Property<string>("RoomNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ROOM_NO");

                    b.Property<long?>("SafeDocNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SAFE_DOC_NO");

                    b.Property<long?>("SafeDocNo2")
                        .HasColumnType("bigint")
                        .HasColumnName("SAFE_DOC_NO2");

                    b.Property<int?>("SafeDocNo3")
                        .HasColumnType("int")
                        .HasColumnName("SAFE_DOC_NO3");

                    b.Property<int?>("SafeInNo1")
                        .HasColumnType("int")
                        .HasColumnName("SAFE_IN_NO1");

                    b.Property<int?>("SafeInNo2")
                        .HasColumnType("int")
                        .HasColumnName("SAFE_IN_NO2");

                    b.Property<int?>("SendFr")
                        .HasColumnType("int")
                        .HasColumnName("SEND_FR");

                    b.Property<int?>("SendTo")
                        .HasColumnType("int")
                        .HasColumnName("SEND_TO");

                    b.Property<int?>("SendTransfir")
                        .HasColumnType("int")
                        .HasColumnName("SEND_TRANSFIR");

                    b.Property<int?>("SessionNo")
                        .HasColumnType("int")
                        .HasColumnName("SESSION_NO");

                    b.Property<decimal?>("StampVal")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("STAMP_VAL");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.Property<string>("Submitid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SUBMITID");

                    b.Property<DateTime?>("TaxDate")
                        .HasColumnType("datetime")
                        .HasColumnName("TAX_DATE");

                    b.Property<int?>("TaxFlag")
                        .HasColumnType("int")
                        .HasColumnName("TAX_FLAG");

                    b.Property<decimal?>("TransfVal")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("TRANSF_VAL");

                    b.Property<int?>("UserCodeCreate")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE_CREATE");

                    b.Property<int?>("UserCodeModify")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE_MODIFY");

                    b.Property<string>("Uuid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UUID");

                    b.Property<decimal?>("WindowFlag")
                        .HasColumnType("decimal(38, 0)")
                        .HasColumnName("WINDOW_FLAG");

                    b.HasKey("MasterId");

                    b.HasIndex("BrnachInitial");

                    b.HasIndex("CompId");

                    b.HasIndex("CompIdDtl");

                    b.HasIndex("DrCode");

                    b.HasIndex("PatId");

                    b.HasIndex("SendFr");

                    b.ToTable("PAT_ADMISSION");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.PriceList", b =>
                {
                    b.Property<int>("PLId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("P_L_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PLId"));

                    b.Property<int?>("ActiveList")
                        .HasColumnType("int")
                        .HasColumnName("ACTIVE_LIST");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("CheckAddToCompany")
                        .HasColumnType("int")
                        .HasColumnName("CHECK_ADD_TO_COMPANY");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<int?>("Flag1")
                        .HasColumnType("int")
                        .HasColumnName("FLAG1");

                    b.Property<DateTime?>("ModfyDate")
                        .HasColumnType("datetime")
                        .HasColumnName("MODFY_DATE");

                    b.Property<DateTime?>("PLDate")
                        .HasColumnType("datetime")
                        .HasColumnName("P_L_DATE");

                    b.Property<int?>("PType")
                        .HasColumnType("int")
                        .HasColumnName("P_TYPE");

                    b.Property<string>("PlDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PL_DESC");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.Property<int?>("ServOnOff")
                        .HasColumnType("int")
                        .HasColumnName("SERV_ON_OFF");

                    b.Property<int?>("UserModify")
                        .HasColumnType("int")
                        .HasColumnName("USER_MODIFY");

                    b.Property<int?>("Year")
                        .HasColumnType("int")
                        .HasColumnName("YEAR");

                    b.HasKey("PLId");

                    b.HasIndex("BranchId");

                    b.ToTable("PRICE_LIST");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.PriceListDetail", b =>
                {
                    b.Property<int>("PLDtlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("P_L_DTL_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PLDtlId"));

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("CLINIC_ID");

                    b.Property<decimal?>("CompCovPercentage")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("COMP_COV_PERCENTAGE");

                    b.Property<decimal?>("CompCovPercentage2")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("COMP_COV_PERCENTAGE2");

                    b.Property<decimal?>("CompValue")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("COMP_VALUE");

                    b.Property<decimal?>("CompValue2")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("COMP_VALUE2");

                    b.Property<decimal?>("CostCare")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("COST_CARE");

                    b.Property<int?>("Covered")
                        .HasColumnType("int")
                        .HasColumnName("COVERED");

                    b.Property<decimal?>("DiscoutComp")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("DISCOUT_COMP");

                    b.Property<decimal?>("DrPerc")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("DR_PERC");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<decimal?>("ExtraVal")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("EXTRA_VAL");

                    b.Property<decimal?>("ExtraVal2")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("EXTRA_VAL2");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ITEM_CODE");

                    b.Property<int?>("ItemSrvFlg")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_SRV_FLG");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<DateTime?>("ModfyDate")
                        .HasColumnType("datetime")
                        .HasColumnName("MODFY_DATE");

                    b.Property<DateTime?>("PLDate")
                        .HasColumnType("datetime")
                        .HasColumnName("P_L_DATE");

                    b.Property<int?>("PLDetailCode")
                        .HasColumnType("int")
                        .HasColumnName("P_L_DETAIL_CODE");

                    b.Property<int?>("PLId")
                        .HasColumnType("int")
                        .HasColumnName("P_L_ID");

                    b.Property<decimal?>("PlValue")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("PL_VALUE");

                    b.Property<decimal?>("PlValue2")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("PL_VALUE2");

                    b.Property<decimal?>("PlValue3")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("PL_VALUE3");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.Property<int?>("SClinicId")
                        .HasColumnType("int")
                        .HasColumnName("S_CLINIC_ID");

                    b.Property<decimal?>("ServBefDesc")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("SERV_BEF_DESC");

                    b.Property<string>("ServDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SERV_DESC");

                    b.Property<int?>("ServId")
                        .HasColumnType("int")
                        .HasColumnName("SERV_ID");

                    b.Property<int?>("ServOnOff")
                        .HasColumnType("int")
                        .HasColumnName("SERV_ON_OFF");

                    b.Property<int?>("UserCode")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE");

                    b.Property<double?>("UserModify")
                        .HasColumnType("float")
                        .HasColumnName("USER_MODIFY");

                    b.HasKey("PLDtlId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("PLId");

                    b.HasIndex("SClinicId");

                    b.HasIndex("ServId");

                    b.ToTable("PRICE_LIST_DETAIL");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.Region", b =>
                {
                    b.Property<int>("RegionCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("REGION_CODE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionCode"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("ClassificationCust")
                        .HasColumnType("int")
                        .HasColumnName("CLASSIFICATION_CUST");

                    b.Property<int?>("Flag")
                        .HasColumnType("int")
                        .HasColumnName("FLAG");

                    b.Property<int?>("OnOff")
                        .HasColumnType("int")
                        .HasColumnName("ON_OFF");

                    b.Property<decimal?>("QtyIn")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("QTY_IN");

                    b.Property<decimal?>("QtyOre")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("QTY_ORE");

                    b.Property<decimal?>("QtyOut")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("QTY_OUT");

                    b.Property<DateTime?>("RegDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("REG_DATE");

                    b.Property<int?>("RegYear")
                        .HasColumnType("int")
                        .HasColumnName("REG_YEAR");

                    b.Property<string>("RegionDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("REGION_DESC");

                    b.Property<int>("SectionCode")
                        .HasColumnType("int")
                        .HasColumnName("SECTION_CODE");

                    b.Property<int?>("StockCode")
                        .HasColumnType("int")
                        .HasColumnName("STOCK_CODE");

                    b.HasKey("RegionCode");

                    b.HasIndex("ClassificationCust");

                    b.ToTable("REGIONS");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.ServiceClinic", b =>
                {
                    b.Property<int>("ServId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SERV_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServId"));

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("CLINIC_ID");

                    b.Property<int?>("ClinicIdNew")
                        .HasColumnType("int")
                        .HasColumnName("CLINIC_ID_NEW");

                    b.Property<int?>("CostCode")
                        .HasColumnType("int")
                        .HasColumnName("COST_CODE");

                    b.Property<decimal?>("DrPerc")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("DR_PERC");

                    b.Property<decimal?>("DrVal")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("DR_VAL");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<int?>("Flag")
                        .HasColumnType("int")
                        .HasColumnName("FLAG");

                    b.Property<int?>("MedicalFlag")
                        .HasColumnType("int")
                        .HasColumnName("MEDICAL_FLAG");

                    b.Property<DateTime?>("ModfyDate")
                        .HasColumnType("datetime")
                        .HasColumnName("MODFY_DATE");

                    b.Property<decimal?>("PlValue")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("PL_VALUE");

                    b.Property<int?>("ProtectId")
                        .HasColumnType("int")
                        .HasColumnName("PROTECT_ID");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.Property<int?>("SClinicId")
                        .HasColumnType("int")
                        .HasColumnName("S_CLINIC_ID");

                    b.Property<int?>("SClinicIdNew")
                        .HasColumnType("int")
                        .HasColumnName("S_CLINIC_ID_NEW");

                    b.Property<int?>("SecId")
                        .HasColumnType("int")
                        .HasColumnName("SEC_ID");

                    b.Property<decimal?>("ServCostVal")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("SERV_COST_VAL");

                    b.Property<string>("ServDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SERV_DESC");

                    b.Property<int?>("ServIdNew")
                        .HasColumnType("int")
                        .HasColumnName("SERV_ID_NEW");

                    b.Property<int?>("ServOnOff")
                        .HasColumnType("int")
                        .HasColumnName("SERV_ON_OFF");

                    b.Property<int?>("ServType")
                        .HasColumnType("int")
                        .HasColumnName("SERV_TYPE");

                    b.Property<decimal?>("ServVal")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("SERV_VAL");

                    b.Property<int?>("TypId")
                        .HasColumnType("int")
                        .HasColumnName("TYP_ID");

                    b.Property<int?>("UserEntry")
                        .HasColumnType("int")
                        .HasColumnName("USER_ENTRY");

                    b.Property<int?>("UserModify")
                        .HasColumnType("int")
                        .HasColumnName("USER_MODIFY");

                    b.HasKey("ServId");

                    b.HasIndex("CostCode");

                    b.HasIndex("SClinicId");

                    b.ToTable("SERVICE_CLINIC");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.ServiceType", b =>
                {
                    b.Property<int>("TypId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TYP_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypId"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.Property<int?>("StockCode")
                        .HasColumnType("int")
                        .HasColumnName("STOCK_CODE");

                    b.Property<string>("TypDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TYP_DESC");

                    b.HasKey("TypId");

                    b.ToTable("SERVICE_TYPE");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.SubClinic", b =>
                {
                    b.Property<int>("SClinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("S_CLINIC_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SClinicId"));

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("CLINIC_ID");

                    b.Property<int?>("CostCode")
                        .HasColumnType("int")
                        .HasColumnName("COST_CODE");

                    b.Property<string>("EinvItem")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("EINV_ITEM");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<int?>("FlagN")
                        .HasColumnType("int")
                        .HasColumnName("FLAG_N");

                    b.Property<int?>("MedicalFlag")
                        .HasColumnType("int")
                        .HasColumnName("MEDICAL_FLAG");

                    b.Property<DateTime?>("ModfyDate")
                        .HasColumnType("datetime")
                        .HasColumnName("MODFY_DATE");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.Property<string>("SClinicDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("S_CLINIC_DESC");

                    b.Property<int?>("SOnOff")
                        .HasColumnType("int")
                        .HasColumnName("S_ON_OFF");

                    b.Property<string>("SrvInvShowFlg")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("SRV_INV_SHOW_FLG");

                    b.Property<int?>("StockCd")
                        .HasColumnType("int")
                        .HasColumnName("STOCK_CD");

                    b.Property<decimal?>("TaxPrec")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("TAX_PREC");

                    b.Property<int?>("TypId")
                        .HasColumnType("int")
                        .HasColumnName("TYP_ID");

                    b.Property<int?>("UserEntry")
                        .HasColumnType("int")
                        .HasColumnName("USER_ENTRY");

                    b.Property<int?>("UserModify")
                        .HasColumnType("int")
                        .HasColumnName("USER_MODIFY");

                    b.HasKey("SClinicId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("CostCode");

                    b.HasIndex("StockCd");

                    b.HasIndex("TypId");

                    b.ToTable("SUB_CLINIC");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.UsersSection", b =>
                {
                    b.Property<int>("USecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("U_SEC_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("USecId"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("CLINIC_ID");

                    b.Property<int?>("DefaultId")
                        .HasColumnType("int")
                        .HasColumnName("DEFAULT_ID");

                    b.Property<int?>("UserCode")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE");

                    b.HasKey("USecId");

                    b.ToTable("USERS_SECTION");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.CoronaryAngiographyReport", b =>
                {
                    b.Property<int>("SerialHistory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SERIAL_HISTORY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SerialHistory"));

                    b.Property<string>("Access")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ACCESS_");

                    b.Property<string>("AmountOfContrastMl")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AMOUNT_OF_CONTRAST_ML");

                    b.Property<string>("CatheterForLeftCoronary")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CATHETER_FOR_LEFT_CORONARY");

                    b.Property<string>("CatheterForRca")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CATHETER_FOR_RCA");

                    b.Property<double?>("CinDiagnostic")
                        .HasColumnType("float")
                        .HasColumnName("CIN_DIAGNOSTIC");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DIAGNOSIS");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<string>("FirstOperator")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("FIRST_OPERATOR");

                    b.Property<double?>("HematomaD")
                        .HasColumnType("float")
                        .HasColumnName("HEMATOMA_D");

                    b.Property<string>("Lad")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LAD");

                    b.Property<string>("Lcx")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LCX");

                    b.Property<string>("LeftAnteriorDescending")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LEFT_ANTERIOR_DESCENDING");

                    b.Property<string>("LeftCircumflex")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LEFT_CIRCUMFLEX");

                    b.Property<string>("LeftMain")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LEFT_MAIN");

                    b.Property<string>("LeftMainCoronary")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LEFT_MAIN_CORONARY");

                    b.Property<string>("OtherVessels")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("OTHER_VESSELS");

                    b.Property<int?>("PatId")
                        .HasColumnType("int")
                        .HasColumnName("PAT_ID");

                    b.Property<string>("PatSsn")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("PAT_SSN");

                    b.Property<double?>("PreoprativeAssessment")
                        .HasColumnType("float")
                        .HasColumnName("PREOPRATIVE_ASSESSMENT");

                    b.Property<double?>("PreoprativeAssessment1")
                        .HasColumnType("float")
                        .HasColumnName("PREOPRATIVE_ASSESSMENT_");

                    b.Property<string>("Rca")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("RCA");

                    b.Property<string>("Recomendation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RECOMENDATION");

                    b.Property<string>("RightCoronaryArtery")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RIGHT_CORONARY_ARTERY");

                    b.Property<string>("SecondOperator")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SECOND_OPERATOR");

                    b.Property<decimal?>("Serial")
                        .HasColumnType("numeric(8, 0)")
                        .HasColumnName("SERIAL");

                    b.HasKey("SerialHistory");

                    b.HasIndex("PatId");

                    b.ToTable("CORONARY_ANGIOGRAPHY_REPORT");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.DailyFollowUpCcuChant", b =>
                {
                    b.Property<int>("SerialHistory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SERIAL_HISTORY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SerialHistory"));

                    b.Property<string>("Blpr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("BLPR");

                    b.Property<string>("ChestCondition")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CHEST_CONDITION");

                    b.Property<string>("Cnp")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CNP");

                    b.Property<string>("ConsciousLevel")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CONSCIOUS_LEVEL");

                    b.Property<string>("ConsultantVisitRecommendati")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CONSULTANT_VISIT_RECOMMENDATI");

                    b.Property<string>("CurrentCO")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CURRENT_C_O");

                    b.Property<string>("Ecg")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ECG");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<string>("Infusions")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("INFUSIONS");

                    b.Property<string>("InsulinGiven")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("INSULIN_GIVEN");

                    b.Property<string>("InvestigasionsOrderd")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("INVESTIGASIONS_ORDERD");

                    b.Property<string>("LowerLimbEdema")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LOWER_LIMB_EDEMA");

                    b.Property<string>("O2Sat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("O2_SAT");

                    b.Property<int?>("PatId")
                        .HasColumnType("int")
                        .HasColumnName("PAT_ID");

                    b.Property<string>("PatSsn")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("PAT_SSN");

                    b.Property<string>("Rbs")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RBS");

                    b.Property<decimal?>("Serial")
                        .HasColumnType("numeric(8, 0)")
                        .HasColumnName("SERIAL");

                    b.Property<string>("Temp")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TEMP");

                    b.Property<string>("UnineOutPut")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UNINE_OUT_PUT");

                    b.Property<string>("UpdatesInMedication")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UPDATES_IN_MEDICATION");

                    b.HasKey("SerialHistory");

                    b.HasIndex("PatId");

                    b.ToTable("DAILY_FOLLOW_UP_CCU_CHANT");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.DischargeSummery", b =>
                {
                    b.Property<int>("SerialHistory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SERIAL_HISTORY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SerialHistory"));

                    b.Property<string>("BlprAtDischarge")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("BLPR_AT_DISCHARGE");

                    b.Property<string>("ConditionAtDischarge")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("CONDITION_AT_DISCHARGE");

                    b.Property<string>("CourseDuringStay")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("COURSE_DURING_STAY");

                    b.Property<string>("EcgAtDischage")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ECG_AT_DISCHAGE");

                    b.Property<string>("EchoAtDischarge")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ECHO_AT_DISCHARGE");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<string>("FinalDiagnosis")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FINAL_DIAGNOSIS");

                    b.Property<string>("ImportantInstructionsAtDisc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("IMPORTANT_INSTRUCTIONS_AT_DISC");

                    b.Property<DateTime?>("NextFollwupDate")
                        .HasColumnType("datetime")
                        .HasColumnName("NEXT_FOLLWUP_DATE");

                    b.Property<int?>("PatId")
                        .HasColumnType("int")
                        .HasColumnName("PAT_ID");

                    b.Property<string>("PatSsn")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("PAT_SSN");

                    b.Property<string>("Prescription")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("PRESCRIPTION");

                    b.Property<string>("ReferingDr")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("REFERING_DR");

                    b.Property<decimal?>("Serial")
                        .HasColumnType("numeric(8, 0)")
                        .HasColumnName("SERIAL");

                    b.HasKey("SerialHistory");

                    b.HasIndex("PatId");

                    b.ToTable("DISCHARGE_SUMMERY");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.EcgAndEcho", b =>
                {
                    b.Property<int>("SerialHistory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SERIAL_HISTORY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SerialHistory"));

                    b.Property<string>("Edd")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EDD");

                    b.Property<string>("EjectionFraction")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EJECTION_FRACTION");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<string>("Esd")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ESD");

                    b.Property<int?>("PatId")
                        .HasColumnType("int")
                        .HasColumnName("PAT_ID");

                    b.Property<string>("PatSsn")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("PAT_SSN");

                    b.Property<string>("RhythmOfAdmission")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("RHYTHM_OF_ADMISSION");

                    b.Property<decimal?>("Serial")
                        .HasColumnType("numeric(8, 0)")
                        .HasColumnName("SERIAL");

                    b.Property<double?>("SwmaAtRest")
                        .HasColumnType("float")
                        .HasColumnName("SWMA_AT_REST");

                    b.HasKey("SerialHistory");

                    b.HasIndex("PatId");

                    b.ToTable("ECG_AND_ECHO");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.Echo", b =>
                {
                    b.Property<int>("SerialHistory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SERIAL_HISTORY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SerialHistory"));

                    b.Property<string>("Acs")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ACS");

                    b.Property<string>("Aod")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("AOD");

                    b.Property<string>("AorticFlow")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("AORTIC_FLOW");

                    b.Property<string>("AorticValve2d")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("AORTIC_VALVE_2D");

                    b.Property<string>("Comment1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("COMMENT_1");

                    b.Property<string>("Comment10")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("COMMENT_10");

                    b.Property<string>("Comment2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("COMMENT_2");

                    b.Property<string>("Comment3")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("COMMENT_3");

                    b.Property<string>("Comment4")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("COMMENT_4");

                    b.Property<string>("Comment5")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("COMMENT_5");

                    b.Property<string>("Comment6")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("COMMENT_6");

                    b.Property<string>("Comment7")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("COMMENT_7");

                    b.Property<string>("Comment8")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("COMMENT_8");

                    b.Property<string>("Comment9")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("COMMENT_9");

                    b.Property<string>("Conclusion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CONCLUSION");

                    b.Property<string>("E")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("E_");

                    b.Property<string>("EARatio")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("E_A_RATIO");

                    b.Property<string>("EE")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("E_E");

                    b.Property<string>("EddCm")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("EDD_CM");

                    b.Property<string>("Ef")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("EF");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<string>("EsdCm")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ESD_CM");

                    b.Property<string>("FirstOperator")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("FIRST_OPERATOR");

                    b.Property<string>("Fs")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("FS");

                    b.Property<string>("IvsdCm")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IVSD_CM");

                    b.Property<string>("La")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LA");

                    b.Property<string>("LeftAtrium2d")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LEFT_ATRIUM_2D");

                    b.Property<string>("LeftVentricle2d")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LEFT_VENTRICLE_2D");

                    b.Property<string>("LvpwdCm")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LVPWD_CM");

                    b.Property<string>("MitralFlow")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("MITRAL_FLOW");

                    b.Property<string>("MitralValve2d")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("MITRAL_VALVE_2D");

                    b.Property<int?>("PatId")
                        .HasColumnType("int")
                        .HasColumnName("PAT_ID");

                    b.Property<string>("PatSsn")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("PAT_SSN");

                    b.Property<string>("PulmonaryFlow")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PULMONARY_FLOW");

                    b.Property<string>("PulmonaryValve2d")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PULMONARY_VALVE_2D");

                    b.Property<string>("RightAtrium2d")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("RIGHT_ATRIUM_2D");

                    b.Property<string>("RightVentricle2d")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("RIGHT_VENTRICLE_2D");

                    b.Property<decimal?>("Serial")
                        .HasColumnType("numeric(8, 0)")
                        .HasColumnName("SERIAL");

                    b.Property<string>("Tapse")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TAPSE");

                    b.Property<string>("TricsupidFlow")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TRICSUPID_FLOW");

                    b.Property<string>("TricuspidValve2d")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TRICUSPID_VALVE_2D");

                    b.HasKey("SerialHistory");

                    b.HasIndex("PatId");

                    b.ToTable("ECHO");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.HistoryExamination", b =>
                {
                    b.Property<int>("SerialHistory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SERIAL_HISTORY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SerialHistory"));

                    b.Property<string>("BelongingToSubSpeciality")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("BELONGING_TO_SUB_SPECIALITY");

                    b.Property<double?>("CardiacArrestInPresentation")
                        .HasColumnType("float")
                        .HasColumnName("CARDIAC_ARREST_IN_PRESENTATION");

                    b.Property<string>("CardiacExamination")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CARDIAC_EXAMINATION");

                    b.Property<string>("ComplaintAndPresentHistory")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("COMPLAINT_AND_PRESENT_HISTORY");

                    b.Property<decimal?>("DiastolicBloodPressure")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("DIASTOLIC_BLOOD_PRESSURE");

                    b.Property<decimal?>("DoorToBalloonH")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("DOOR_TO_BALLOON_H");

                    b.Property<string>("EcgExamination")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ECG_EXAMINATION");

                    b.Property<string>("EchoAdmission")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ECHO_ADMISSION");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<string>("GeneralExamination")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("GENERAL_EXAMINATION");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("HEIGHT");

                    b.Property<double?>("KillipClass")
                        .HasColumnType("float")
                        .HasColumnName("KILLIP_CLASS");

                    b.Property<double?>("LocalizationOfMi")
                        .HasColumnType("float")
                        .HasColumnName("LOCALIZATION_OF_MI");

                    b.Property<double?>("MechanicalComplicationOfMi")
                        .HasColumnType("float")
                        .HasColumnName("MECHANICAL_COMPLICATION_OF_MI");

                    b.Property<decimal?>("OxygenSat")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("OXYGEN_SAT");

                    b.Property<string>("PastHistory")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("PAST_HISTORY");

                    b.Property<int?>("PatId")
                        .HasColumnType("int")
                        .HasColumnName("PAT_ID");

                    b.Property<string>("PatSsn")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("PAT_SSN");

                    b.Property<string>("PreviousAdmissionWithAcs")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("PREVIOUS_ADMISSION_WITH_ACS");

                    b.Property<string>("PreviousAngioResults")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("PREVIOUS_ANGIO_RESULTS");

                    b.Property<string>("PreviousExersiseTest")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("PREVIOUS_EXERSISE_TEST");

                    b.Property<string>("ProvisionalDiagnosis")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("PROVISIONAL_DIAGNOSIS");

                    b.Property<decimal?>("RespRate")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("RESP_RATE");

                    b.Property<decimal?>("Serial")
                        .HasColumnType("numeric(8, 0)")
                        .HasColumnName("SERIAL");

                    b.Property<decimal?>("SympToDoorH")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("SYMP_TO_DOOR_H");

                    b.Property<decimal?>("SytolicBloodPressure")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("SYTOLIC_BLOOD_PRESSURE");

                    b.Property<decimal?>("Temp")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("TEMP");

                    b.Property<string>("ThrombolyticTherapy")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("THROMBOLYTIC_THERAPY");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("WEIGHT");

                    b.HasKey("SerialHistory");

                    b.HasIndex("PatId");

                    b.ToTable("HISTORY_EXAMINATION");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.LabReport", b =>
                {
                    b.Property<int>("SerialHistory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SERIAL_HISTORY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SerialHistory"));

                    b.Property<decimal?>("Alb")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("ALB");

                    b.Property<decimal?>("Alt")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("ALT");

                    b.Property<decimal?>("Ast")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("AST");

                    b.Property<decimal?>("Bil")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("BIL");

                    b.Property<decimal?>("Ca")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("CA");

                    b.Property<decimal?>("Cholesterol")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("CHOLESTEROL");

                    b.Property<decimal?>("Ckmb")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("CKMB");

                    b.Property<decimal?>("Cr48HAfterAngioplasty")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("CR_48_H_AFTER_ANGIOPLASTY");

                    b.Property<decimal?>("CrBeforeAngioplasty")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("CR_BEFORE_ANGIOPLASTY");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<decimal?>("Hb")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("HB");

                    b.Property<string>("Hbvsag")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("HBVSAG");

                    b.Property<decimal?>("HcvA1c")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("HCV_A1C");

                    b.Property<string>("HcvAb")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("HCV_AB");

                    b.Property<decimal?>("Hdl")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("HDL");

                    b.Property<decimal?>("Inr")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("INR");

                    b.Property<decimal?>("K")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<decimal?>("Ldh")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("LDH");

                    b.Property<decimal?>("Ldl")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("LDL");

                    b.Property<decimal?>("Mg")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("MG");

                    b.Property<decimal?>("Na")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("NA");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOTES");

                    b.Property<int?>("PatId")
                        .HasColumnType("int")
                        .HasColumnName("PAT_ID");

                    b.Property<string>("PatSsn")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("PAT_SSN");

                    b.Property<decimal?>("Platelet")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("PLATELET");

                    b.Property<decimal?>("Serial")
                        .HasColumnType("numeric(8, 0)")
                        .HasColumnName("SERIAL");

                    b.Property<decimal?>("Tg")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("TG");

                    b.Property<string>("Trop")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("TROP");

                    b.Property<decimal?>("Tsh")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("TSH");

                    b.Property<decimal?>("Urea")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("UREA");

                    b.Property<decimal?>("Wbcs")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("WBCS");

                    b.HasKey("SerialHistory");

                    b.HasIndex("PatId");

                    b.ToTable("LAB_REPORTS");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.MedicationAtCcu", b =>
                {
                    b.Property<int>("SerialHistory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SERIAL_HISTORY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SerialHistory"));

                    b.Property<double?>("Asa")
                        .HasColumnType("float")
                        .HasColumnName("ASA");

                    b.Property<double?>("Bb")
                        .HasColumnType("float")
                        .HasColumnName("BB");

                    b.Property<double?>("Brilique")
                        .HasColumnType("float")
                        .HasColumnName("BRILIQUE");

                    b.Property<double?>("Clexane")
                        .HasColumnType("float")
                        .HasColumnName("CLEXANE");

                    b.Property<double?>("DobutamineLvl")
                        .HasColumnType("float")
                        .HasColumnName("DOBUTAMINE_LVL");

                    b.Property<double?>("DopamineLvl")
                        .HasColumnType("float")
                        .HasColumnName("DOPAMINE_LVL");

                    b.Property<double?>("Dormicum")
                        .HasColumnType("float")
                        .HasColumnName("DORMICUM");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<double?>("Eptifibtide")
                        .HasColumnType("float")
                        .HasColumnName("EPTIFIBTIDE");

                    b.Property<double?>("FluidLv")
                        .HasColumnType("float")
                        .HasColumnName("FLUID_LV");

                    b.Property<double?>("Heparin")
                        .HasColumnType("float")
                        .HasColumnName("HEPARIN");

                    b.Property<double?>("Lasix")
                        .HasColumnType("float")
                        .HasColumnName("LASIX");

                    b.Property<double?>("LevophidLvl")
                        .HasColumnType("float")
                        .HasColumnName("LEVOPHID_LVL");

                    b.Property<double?>("MechanicalVentilation")
                        .HasColumnType("float")
                        .HasColumnName("MECHANICAL_VENTILATION");

                    b.Property<double?>("Morphea")
                        .HasColumnType("float")
                        .HasColumnName("MORPHEA");

                    b.Property<double?>("NitratesLvl")
                        .HasColumnType("float")
                        .HasColumnName("NITRATES_LVL");

                    b.Property<double?>("NitratesSl")
                        .HasColumnType("float")
                        .HasColumnName("NITRATES_SL");

                    b.Property<int?>("PatId")
                        .HasColumnType("int")
                        .HasColumnName("PAT_ID");

                    b.Property<string>("PatSsn")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("PAT_SSN");

                    b.Property<double?>("Plavix")
                        .HasColumnType("float")
                        .HasColumnName("PLAVIX");

                    b.Property<decimal?>("Serial")
                        .HasColumnType("numeric(8, 0)")
                        .HasColumnName("SERIAL");

                    b.Property<double?>("TirofibanLv")
                        .HasColumnType("float")
                        .HasColumnName("TIROFIBAN_LV");

                    b.HasKey("SerialHistory");

                    b.HasIndex("PatId");

                    b.ToTable("MEDICATION_AT_CCU");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.PastHistory", b =>
                {
                    b.Property<int>("SerialHistory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SERIAL_HISTORY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SerialHistory"));

                    b.Property<double?>("ChronicAf")
                        .HasColumnType("float")
                        .HasColumnName("CHRONIC_AF");

                    b.Property<double?>("CkdOnDialysis")
                        .HasColumnType("float")
                        .HasColumnName("CKD_ON_DIALYSIS");

                    b.Property<double?>("CkdOnMedical")
                        .HasColumnType("float")
                        .HasColumnName("CKD_ON_MEDICAL");

                    b.Property<double?>("Csa")
                        .HasColumnType("float")
                        .HasColumnName("CSA");

                    b.Property<double?>("Diabetes")
                        .HasColumnType("float")
                        .HasColumnName("DIABETES");

                    b.Property<double?>("Dyslipidemia")
                        .HasColumnType("float")
                        .HasColumnName("DYSLIPIDEMIA");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<double?>("HashishAddict")
                        .HasColumnType("float")
                        .HasColumnName("HASHISH_ADDICT");

                    b.Property<double?>("HemorthagicStroke")
                        .HasColumnType("float")
                        .HasColumnName("HEMORTHAGIC_STROKE");

                    b.Property<double?>("Hfpef")
                        .HasColumnType("float")
                        .HasColumnName("HFPEF");

                    b.Property<double?>("Hfref")
                        .HasColumnType("float")
                        .HasColumnName("HFREF");

                    b.Property<double?>("Htn")
                        .HasColumnType("float")
                        .HasColumnName("HTN");

                    b.Property<double?>("Hyperthyroidism")
                        .HasColumnType("float")
                        .HasColumnName("HYPERTHYROIDISM");

                    b.Property<double?>("Hypothyroidism")
                        .HasColumnType("float")
                        .HasColumnName("HYPOTHYROIDISM");

                    b.Property<double?>("IschemicStroke")
                        .HasColumnType("float")
                        .HasColumnName("ISCHEMIC_STROKE");

                    b.Property<double?>("IvAddict")
                        .HasColumnType("float")
                        .HasColumnName("IV_ADDICT");

                    b.Property<double?>("MalignantTumors")
                        .HasColumnType("float")
                        .HasColumnName("MALIGNANT_TUMORS");

                    b.Property<double?>("OsApnea")
                        .HasColumnType("float")
                        .HasColumnName("OS_APNEA");

                    b.Property<int?>("PatId")
                        .HasColumnType("int")
                        .HasColumnName("PAT_ID");

                    b.Property<string>("PatSsn")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("PAT_SSN");

                    b.Property<double?>("Pregnant")
                        .HasColumnType("float")
                        .HasColumnName("PREGNANT");

                    b.Property<double?>("PriorCabg")
                        .HasColumnType("float")
                        .HasColumnName("PRIOR_CABG");

                    b.Property<double?>("PriorMi")
                        .HasColumnType("float")
                        .HasColumnName("PRIOR_MI");

                    b.Property<double?>("PriorPci")
                        .HasColumnType("float")
                        .HasColumnName("PRIOR_PCI");

                    b.Property<double?>("ProstheticValve")
                        .HasColumnType("float")
                        .HasColumnName("PROSTHETIC_VALVE");

                    b.Property<double?>("ProxysmaiAf")
                        .HasColumnType("float")
                        .HasColumnName("PROXYSMAI_AF");

                    b.Property<double?>("RheumaticHeatDisease")
                        .HasColumnType("float")
                        .HasColumnName("RHEUMATIC_HEAT_DISEASE");

                    b.Property<decimal?>("Serial")
                        .HasColumnType("numeric(8, 0)")
                        .HasColumnName("SERIAL");

                    b.Property<double?>("Somker")
                        .HasColumnType("float")
                        .HasColumnName("SOMKER");

                    b.Property<double?>("Tia")
                        .HasColumnType("float")
                        .HasColumnName("TIA");

                    b.Property<double?>("TramadolAddict")
                        .HasColumnType("float")
                        .HasColumnName("TRAMADOL_ADDICT");

                    b.HasKey("SerialHistory");

                    b.HasIndex("PatId");

                    b.ToTable("PAST_HISTORY");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.PciReport", b =>
                {
                    b.Property<int>("SerialHistory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SERIAL_HISTORY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SerialHistory"));

                    b.Property<double?>("AdenosineLc")
                        .HasColumnType("float")
                        .HasColumnName("ADENOSINE_LC");

                    b.Property<double?>("AdrenalineLc")
                        .HasColumnType("float")
                        .HasColumnName("ADRENALINE_LC");

                    b.Property<string>("AmountOfContrastPciMl")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("AMOUNT_OF_CONTRAST_PCI_ML");

                    b.Property<double?>("AnchorBalloon")
                        .HasColumnType("float")
                        .HasColumnName("ANCHOR_BALLOON");

                    b.Property<double?>("BifurcationalLesion")
                        .HasColumnType("float")
                        .HasColumnName("BIFURCATIONAL_LESION");

                    b.Property<string>("BifurcationalTechnique")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("BIFURCATIONAL_TECHNIQUE");

                    b.Property<double?>("BuddyWire")
                        .HasColumnType("float")
                        .HasColumnName("BUDDY_WIRE");

                    b.Property<double?>("CalcificLesion")
                        .HasColumnType("float")
                        .HasColumnName("CALCIFIC_LESION");

                    b.Property<double?>("CcbLc")
                        .HasColumnType("float")
                        .HasColumnName("CCB_LC");

                    b.Property<double?>("CinPci")
                        .HasColumnType("float")
                        .HasColumnName("CIN_PCI");

                    b.Property<double?>("Cto")
                        .HasColumnType("float")
                        .HasColumnName("CTO");

                    b.Property<string>("Culprit")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CULPRIT");

                    b.Property<double?>("DeathPci")
                        .HasColumnType("float")
                        .HasColumnName("DEATH_PCI");

                    b.Property<string>("DiagnosisOfPci")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DIAGNOSIS_OF_PCI");

                    b.Property<string>("DiameterOf2ndStent")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DIAMETER_OF_2ND_STENT");

                    b.Property<string>("DiameterOf3rdStent")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DIAMETER_OF_3RD_STENT");

                    b.Property<string>("DiameterOf4thStent")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DIAMETER_OF_4TH_STENT");

                    b.Property<string>("DiameterOf5thStent")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DIAMETER_OF_5TH_STENT");

                    b.Property<string>("DiameterOf6thStent")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DIAMETER_OF_6TH_STENT");

                    b.Property<string>("DiameterOfPostdilatationBal")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DIAMETER_OF_POSTDILATATION_BAL");

                    b.Property<string>("DiameterOfPredilatation")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DIAMETER_OF_PREDILATATION");

                    b.Property<string>("DiameterOfStent")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DIAMETER_OF_STENT");

                    b.Property<double?>("DisectionPci")
                        .HasColumnType("float")
                        .HasColumnName("DISECTION_PCI");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<double?>("FailedWiring")
                        .HasColumnType("float")
                        .HasColumnName("FAILED_WIRING");

                    b.Property<string>("FirstOperator")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("FIRST_OPERATOR");

                    b.Property<double?>("GpInhibitosLc")
                        .HasColumnType("float")
                        .HasColumnName("GP_INHIBITOS_LC");

                    b.Property<string>("HeavnessOfWire")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("HEAVNESS_OF_WIRE");

                    b.Property<double?>("HematomaPci")
                        .HasColumnType("float")
                        .HasColumnName("HEMATOMA_PCI");

                    b.Property<double?>("HeparinLc")
                        .HasColumnType("float")
                        .HasColumnName("HEPARIN_LC");

                    b.Property<double?>("IntraAorticBalloon")
                        .HasColumnType("float")
                        .HasColumnName("INTRA_AORTIC_BALLOON");

                    b.Property<string>("LenghtOf2ndStent")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("LENGHT_OF_2ND_STENT");

                    b.Property<string>("LenghtOf3rdStent")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("LENGHT_OF_3RD_STENT");

                    b.Property<string>("LenghtOf4thStent")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("LENGHT_OF_4TH_STENT");

                    b.Property<string>("LenghtOf5thStent")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("LENGHT_OF_5TH_STENT");

                    b.Property<string>("LenghtOf6thStent")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("LENGHT_OF_6TH_STENT");

                    b.Property<string>("LenghtOfStent")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("LENGHT_OF_STENT");

                    b.Property<string>("LesionConfiguration")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("LESION_CONFIGURATION");

                    b.Property<string>("MaxPressureOfBalloon")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("MAX_PRESSURE_OF_BALLOON");

                    b.Property<string>("MaxPressureOfPostBalloon")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("MAX_PRESSURE_OF_POST_BALLOON");

                    b.Property<string>("MethodOfNoReflowManagement")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("METHOD_OF_NO_REFLOW_MANAGEMENT");

                    b.Property<string>("NoOfDiseasedVesselS50")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("NO_OF_DISEASED_VESSEL_S_50");

                    b.Property<double?>("NoReflow")
                        .HasColumnType("float")
                        .HasColumnName("NO_REFLOW");

                    b.Property<string>("OutcomeOfNoReflow")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("OUTCOME_OF_NO_REFLOW");

                    b.Property<double?>("OverlappInMainVessel")
                        .HasColumnType("float")
                        .HasColumnName("OVERLAPP_IN_MAIN_VESSEL");

                    b.Property<int?>("PatId")
                        .HasColumnType("int")
                        .HasColumnName("PAT_ID");

                    b.Property<string>("PatSsn")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("PAT_SSN");

                    b.Property<string>("PciAccess")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PCI_ACCESS");

                    b.Property<double?>("PerforationPci")
                        .HasColumnType("float")
                        .HasColumnName("PERFORATION_PCI");

                    b.Property<double?>("Postdilatation")
                        .HasColumnType("float")
                        .HasColumnName("POSTDILATATION");

                    b.Property<string>("Predilatation")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PREDILATATION");

                    b.Property<string>("RecomendationPci")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("RECOMENDATION_PCI");

                    b.Property<string>("RepurtusionStrategy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("REPURTUSION_STRATEGY");

                    b.Property<string>("SecondOperator")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SECOND_OPERATOR");

                    b.Property<decimal?>("Serial")
                        .HasColumnType("numeric(8, 0)")
                        .HasColumnName("SERIAL");

                    b.Property<string>("Step2Pci")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("STEP_2_PCI");

                    b.Property<string>("Step3Pci")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("STEP_3_PCI");

                    b.Property<string>("Step4Pci")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("STEP_4_PCI");

                    b.Property<string>("Step5Pci")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("STEP_5_PCI");

                    b.Property<string>("Step6Pci")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("STEP_6_PCI");

                    b.Property<string>("Step7Pci")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("STEP_7_PCI");

                    b.Property<string>("Step8Pci")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("STEP_8_PCI");

                    b.Property<string>("StepOneOfPci")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("STEP_ONE_OF_PCI");

                    b.Property<double?>("ThrombusAspiration")
                        .HasColumnType("float")
                        .HasColumnName("THROMBUS_ASPIRATION");

                    b.Property<string>("TimiFlowPost")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("TIMI_FLOW_POST");

                    b.Property<string>("TimiFlowPre")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("TIMI_FLOW_PRE");

                    b.Property<double?>("TortiousVessel")
                        .HasColumnType("float")
                        .HasColumnName("TORTIOUS_VESSEL");

                    b.Property<double?>("TreatmentOfNonculprit")
                        .HasColumnType("float")
                        .HasColumnName("TREATMENT_OF_NONCULPRIT");

                    b.Property<double?>("TridilLc")
                        .HasColumnType("float")
                        .HasColumnName("TRIDIL_LC");

                    b.Property<double?>("TrifurcationalLesion")
                        .HasColumnType("float")
                        .HasColumnName("TRIFURCATIONAL_LESION");

                    b.Property<string>("Type2ndStent")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TYPE_2ND_STENT");

                    b.Property<string>("Type3rdStent")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TYPE_3RD_STENT");

                    b.Property<string>("Type4thStent")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TYPE_4TH_STENT");

                    b.Property<string>("Type5thStent")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TYPE_5TH_STENT");

                    b.Property<string>("Type6thStent")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TYPE_6TH_STENT");

                    b.Property<string>("TypeOfAdmission")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("TYPE_OF_ADMISSION");

                    b.Property<string>("TypeOfWire")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("TYPE_OF_WIRE");

                    b.Property<string>("TypeStent")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TYPE_STENT");

                    b.Property<string>("VesselOfRevascularization")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("VESSEL_OF_REVASCULARIZATION");

                    b.HasKey("SerialHistory");

                    b.HasIndex("PatId");

                    b.ToTable("PCI_REPORT");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Shared.AccGlobalDef", b =>
                {
                    b.Property<int>("CodeNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CODE_NO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeNo"));

                    b.Property<int?>("CoCode")
                        .HasColumnType("int")
                        .HasColumnName("CO_CODE");

                    b.Property<string>("CodeDesc")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("CODE_DESC");

                    b.Property<string>("CodeKey")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("CODE_KEY");

                    b.Property<decimal?>("CurRate")
                        .HasColumnType("decimal(9, 6)")
                        .HasColumnName("CUR_RATE");

                    b.Property<string>("JournalCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("JOURNAL_CODE");

                    b.Property<string>("JournalCode2")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("JOURNAL_CODE2");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.Property<string>("Symbol")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SYMBOL");

                    b.Property<string>("TableCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("TABLE_CODE");

                    b.HasKey("CodeNo");

                    b.ToTable("ACC_GLOBAL_DEF");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Shared.AccMonth", b =>
                {
                    b.Property<int?>("CurMonth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CUR_MONTH");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CurMonth"));

                    b.Property<string>("DescMonth")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("DESC_MONTH");

                    b.HasKey("CurMonth");

                    b.ToTable("ACC_MONTH");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Shared.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("BranchDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BRANCH_DESC");

                    b.Property<double?>("BranchIdDefault")
                        .HasColumnType("float")
                        .HasColumnName("BRANCH_ID_DEFAULT");

                    b.Property<double?>("EInvDeal1")
                        .HasColumnType("float")
                        .HasColumnName("E_INV_DEAL1");

                    b.Property<double?>("EInvDeal2")
                        .HasColumnType("float")
                        .HasColumnName("E_INV_DEAL2");

                    b.HasKey("BranchId");

                    b.ToTable("BRANCHS");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Shared.CompanyProfile", b =>
                {
                    b.Property<int>("CoCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CO_CODE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoCode"));

                    b.Property<string>("ArshiveFile")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ARSHIVE_FILE");

                    b.Property<string>("CoNameA")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CO_NAME_A");

                    b.Property<string>("CoNameE")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CO_NAME_E");

                    b.Property<string>("CoProfileDb")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CO_PROFILE_DB");

                    b.Property<string>("CompanyLogo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("COMPANY_LOGO");

                    b.Property<string>("CompanyLogoDtl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("COMPANY_LOGO_DTL");

                    b.Property<double?>("FYear")
                        .HasColumnType("float")
                        .HasColumnName("F_YEAR");

                    b.Property<DateTime?>("LastUpDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UP_DATE");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("LOGO");

                    b.Property<byte[]>("LogoD")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("LOGO_D");

                    b.Property<byte[]>("LogoH")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("LOGO_H");

                    b.Property<string>("LogoHeader")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("LOGO_HEADER");

                    b.Property<string>("PassWordDb")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PASS_WORD_DB");

                    b.Property<double?>("SerialDb")
                        .HasColumnType("float")
                        .HasColumnName("SERIAL_DB");

                    b.Property<string>("ServiceDb")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SERVICE_DB");

                    b.Property<double?>("TypeDb")
                        .HasColumnType("float")
                        .HasColumnName("TYPE_DB");

                    b.Property<string>("UserNameDb")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USER_NAME_DB");

                    b.HasKey("CoCode");

                    b.ToTable("COMPANY_PROFILE");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Shared.EisPosting", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("POST_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("ModuleN")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MODULE_N");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.HasKey("PostId");

                    b.ToTable("EIS_POSTING");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Shared.EisUserObject", b =>
                {
                    b.Property<int>("EisUserObjId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EIS_USER_OBJ_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EisUserObjId"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<string>("ColumnNam")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("COLUMN_NAM");

                    b.Property<int?>("DefultId")
                        .HasColumnType("int")
                        .HasColumnName("DEFULT_ID");

                    b.Property<string>("DwDetail")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("DW_DETAIL");

                    b.Property<string>("DwMaster")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("DW_MASTER");

                    b.Property<string>("ObjectName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("OBJECT_NAME");

                    b.Property<int?>("UDel")
                        .HasColumnType("int")
                        .HasColumnName("U_DEL");

                    b.Property<int?>("UIns")
                        .HasColumnType("int")
                        .HasColumnName("U_INS");

                    b.Property<int?>("UUpd")
                        .HasColumnType("int")
                        .HasColumnName("U_UPD");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.Property<string>("WDesc")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("W_DESC");

                    b.HasKey("EisUserObjId");

                    b.ToTable("EIS_USER_OBJECT");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Shared.GeneralCode", b =>
                {
                    b.Property<int>("GId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("G_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GId"));

                    b.Property<int?>("AddSub")
                        .HasColumnType("int")
                        .HasColumnName("ADD_SUB");

                    b.Property<int?>("AppType")
                        .HasColumnType("int")
                        .HasColumnName("APP_TYPE");

                    b.Property<int?>("CrmFlag")
                        .HasColumnType("int")
                        .HasColumnName("CRM_FLAG");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<string>("DeptName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DEPT_NAME");

                    b.Property<string>("DwDtl")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DW_DTL");

                    b.Property<string>("DwMaster")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DW_MASTER");

                    b.Property<int?>("FormType")
                        .HasColumnType("int")
                        .HasColumnName("FORM_TYPE");

                    b.Property<string>("GDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("G_DESC");

                    b.Property<string>("GType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("G_TYPE");

                    b.Property<int?>("ShowHide")
                        .HasColumnType("int")
                        .HasColumnName("SHOW_HIDE");

                    b.Property<string>("TransDescUser")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TRANS_DESC_USER");

                    b.Property<int?>("TransSort")
                        .HasColumnType("int")
                        .HasColumnName("TRANS_SORT");

                    b.Property<int?>("TransType")
                        .HasColumnType("int")
                        .HasColumnName("TRANS_TYPE");

                    b.Property<int?>("UniqueType")
                        .HasColumnType("int")
                        .HasColumnName("UNIQUE_TYPE");

                    b.HasKey("GId");

                    b.ToTable("GENERAL_CODE");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Shared.NationalityEi", b =>
                {
                    b.Property<int>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NATIONALITY_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NationalityId"));

                    b.Property<string>("NationalityDesc")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("NATIONALITY_DESC");

                    b.Property<string>("NationalityDescE")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NATIONALITY_DESC_E");

                    b.Property<string>("PublicCd")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("PUBLIC_CD");

                    b.HasKey("NationalityId");

                    b.ToTable("NATIONALITY_EIS");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Shared.Sections2", b =>
                {
                    b.Property<int>("SecCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SEC_CD");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecCd"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("OnOff")
                        .HasColumnType("int")
                        .HasColumnName("ON_OFF");

                    b.Property<int?>("SecCost")
                        .HasColumnType("int")
                        .HasColumnName("SEC_COST");

                    b.Property<string>("SecDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SEC_DESC");

                    b.HasKey("SecCd");

                    b.HasIndex("BranchId");

                    b.ToTable("SECTIONS2");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Shared.SystemTable", b =>
                {
                    b.Property<int>("SysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SYS_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SysId"));

                    b.Property<string>("SysDec")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SYS_DEC");

                    b.Property<int?>("SysType")
                        .HasColumnType("int")
                        .HasColumnName("SYS_TYPE");

                    b.Property<int?>("SysValue")
                        .HasColumnType("int")
                        .HasColumnName("SYS_VALUE");

                    b.HasKey("SysId");

                    b.ToTable("SYSTEM_TABLE");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.AdjectiveCust", b =>
                {
                    b.Property<int>("AdjectiveCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ADJECTIVE_CODE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdjectiveCode"));

                    b.Property<string>("AdjectiveDesc")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ADJECTIVE_DESC");

                    b.HasKey("AdjectiveCode");

                    b.ToTable("ADJECTIVE_CUST");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.CityCode", b =>
                {
                    b.Property<int?>("Branch")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH");

                    b.Property<string>("CityCode1")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("CITY_CODE");

                    b.Property<string>("CityName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CITY_NAME");

                    b.ToTable("CITY_CODE");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.CustCode", b =>
                {
                    b.Property<int>("Cust")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CUST");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cust"));

                    b.Property<int?>("AdjectiveCode")
                        .HasColumnType("int")
                        .HasColumnName("ADJECTIVE_CODE");

                    b.Property<int?>("AreaCode")
                        .HasColumnType("int")
                        .HasColumnName("AREA_CODE");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("CatalogId")
                        .HasColumnType("int")
                        .HasColumnName("CATALOG_ID");

                    b.Property<int?>("CityCode")
                        .HasColumnType("int")
                        .HasColumnName("CITY_CODE");

                    b.Property<int?>("ClassificationCust")
                        .HasColumnType("int")
                        .HasColumnName("CLASSIFICATION_CUST");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CONTACT_PERSON");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("COUNTRY_CODE");

                    b.Property<string>("CustAdd")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CUST_ADD");

                    b.Property<string>("CustCode1")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("CUST_CODE");

                    b.Property<decimal?>("CustDisc1")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("CUST_DISC1");

                    b.Property<decimal?>("CustDisc2")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("CUST_DISC2");

                    b.Property<decimal?>("CustDisc3")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("CUST_DISC3");

                    b.Property<int?>("CustDisc4")
                        .HasColumnType("int")
                        .HasColumnName("CUST_DISC4");

                    b.Property<decimal?>("CustDisc5")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("CUST_DISC5");

                    b.Property<string>("CustFax")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("CUST_FAX");

                    b.Property<decimal?>("CustLimit")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("CUST_LIMIT");

                    b.Property<string>("CustName")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("CUST_NAME");

                    b.Property<string>("CustNameE")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CUST_NAME_E");

                    b.Property<string>("CustPhone1")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("CUST_PHONE1");

                    b.Property<string>("CustPhone2")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("CUST_PHONE2");

                    b.Property<string>("CustTaxTyp")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("CUST_TAX_TYP");

                    b.Property<int?>("DeuPeriod")
                        .HasColumnType("int")
                        .HasColumnName("DEU_PERIOD");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("EMAIL");

                    b.Property<int?>("Flag")
                        .HasColumnType("int")
                        .HasColumnName("FLAG");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("RegionCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("REGION_CODE");

                    b.Property<string>("Remarks")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("REMARKS");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.Property<int?>("Sm")
                        .HasColumnType("int")
                        .HasColumnName("SM");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.Property<string>("TaxFileNo")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("TAX_FILE_NO");

                    b.Property<string>("TaxType")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("TAX_TYPE");

                    b.Property<decimal?>("ValCredit")
                        .HasColumnType("decimal(17, 3)")
                        .HasColumnName("VAL_CREDIT");

                    b.Property<decimal?>("ValDept")
                        .HasColumnType("decimal(17, 3)")
                        .HasColumnName("VAL_DEPT");

                    b.HasKey("Cust");

                    b.ToTable("CUST_CODE");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.ItemBatch", b =>
                {
                    b.Property<int>("ItemBatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemBatchID"));

                    b.Property<int?>("BatchCounter")
                        .HasColumnType("int")
                        .HasColumnName("BATCH_COUNTER");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<DateTime?>("ExpDate")
                        .HasColumnType("datetime")
                        .HasColumnName("EXP_DATE");

                    b.Property<int?>("FYear")
                        .HasColumnType("int")
                        .HasColumnName("F_YEAR");

                    b.Property<int?>("Flag1")
                        .HasColumnType("int")
                        .HasColumnName("FLAG1");

                    b.Property<string>("ItemMaster")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ITEM_MASTER");

                    b.Property<string>("ItmBatch")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ITM_BATCH");

                    b.Property<long?>("ItmBatchMax")
                        .HasColumnType("bigint")
                        .HasColumnName("ITM_BATCH_MAX");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(11, 3)")
                        .HasColumnName("PRICE");

                    b.Property<DateTime?>("ReqDate")
                        .HasColumnType("datetime")
                        .HasColumnName("REQ_DATE");

                    b.Property<int?>("SerBatch")
                        .HasColumnType("int")
                        .HasColumnName("SER_BATCH");

                    b.Property<int?>("Serial")
                        .HasColumnType("int")
                        .HasColumnName("SERIAL");

                    b.Property<short?>("StockCode")
                        .HasColumnType("smallint")
                        .HasColumnName("STOCK_CODE");

                    b.Property<string>("TmBarcode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TM_BARCODE");

                    b.Property<long?>("TransN")
                        .HasColumnType("bigint")
                        .HasColumnName("TRANS_N");

                    b.Property<decimal?>("UnitQty")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("UNIT_QTY");

                    b.Property<int?>("UserCode")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE");

                    b.Property<int?>("UserCodeModify")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE_MODIFY");

                    b.HasKey("ItemBatchID");

                    b.ToTable("ITEM_BATCH");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.ItemBatchHistory", b =>
                {
                    b.Property<int>("ItemBatchHistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemBatchHistID"));

                    b.Property<int?>("BatchCounter")
                        .HasColumnType("int")
                        .HasColumnName("BATCH_COUNTER");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<DateTime?>("ExpDate")
                        .HasColumnType("datetime")
                        .HasColumnName("EXP_DATE");

                    b.Property<int?>("FYear")
                        .HasColumnType("int")
                        .HasColumnName("F_YEAR");

                    b.Property<int?>("Flag1")
                        .HasColumnType("int")
                        .HasColumnName("FLAG1");

                    b.Property<string>("ItemMaster")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ITEM_MASTER");

                    b.Property<string>("ItmBatch")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ITM_BATCH");

                    b.Property<long?>("ItmBatchMax")
                        .HasColumnType("bigint")
                        .HasColumnName("ITM_BATCH_MAX");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(11, 3)")
                        .HasColumnName("PRICE");

                    b.Property<DateTime?>("ReqDate")
                        .HasColumnType("datetime")
                        .HasColumnName("REQ_DATE");

                    b.Property<int?>("SerBatch")
                        .HasColumnType("int")
                        .HasColumnName("SER_BATCH");

                    b.Property<int?>("Serial")
                        .HasColumnType("int")
                        .HasColumnName("SERIAL");

                    b.Property<short?>("StockCode")
                        .HasColumnType("smallint")
                        .HasColumnName("STOCK_CODE");

                    b.Property<string>("TmBarcode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TM_BARCODE");

                    b.Property<long?>("TransN")
                        .HasColumnType("bigint")
                        .HasColumnName("TRANS_N");

                    b.Property<decimal?>("UnitQty")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("UNIT_QTY");

                    b.Property<int?>("UserCode")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE");

                    b.Property<int?>("UserCodeModify")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE_MODIFY");

                    b.HasKey("ItemBatchHistID");

                    b.ToTable("ITEM_BATCH_HISTORY");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.ItmReorder", b =>
                {
                    b.Property<int>("ItemReorderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemReorderID"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<DateTime?>("FDate")
                        .HasColumnType("datetime")
                        .HasColumnName("F_DATE");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ITEM_CD");

                    b.Property<decimal?>("MaxQty")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("MAX_QTY");

                    b.Property<decimal?>("MinQty")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("MIN_QTY");

                    b.Property<decimal?>("ReordQty")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("REORD_QTY");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("STORE_ID");

                    b.Property<DateTime?>("TDate")
                        .HasColumnType("datetime")
                        .HasColumnName("T_DATE");

                    b.HasKey("ItemReorderID");

                    b.ToTable("ITM_REORDER");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.KindStore", b =>
                {
                    b.Property<int>("KId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("K_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KId"));

                    b.Property<string>("KName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("K_NAME");

                    b.Property<int?>("KStkOnOff")
                        .HasColumnType("int")
                        .HasColumnName("K_STK_ON_OFF");

                    b.Property<int?>("KType")
                        .HasColumnType("int")
                        .HasColumnName("K_TYPE");

                    b.Property<int?>("StockType")
                        .HasColumnType("int")
                        .HasColumnName("STOCK_TYPE");

                    b.HasKey("KId");

                    b.ToTable("KIND_STORE");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.MainItem", b =>
                {
                    b.Property<int>("MainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MAIN_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MainId"));

                    b.Property<int?>("BatchCounter")
                        .HasColumnType("int")
                        .HasColumnName("BATCH_COUNTER");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("CurrentLevel")
                        .HasColumnType("int")
                        .HasColumnName("CURRENT_LEVEL");

                    b.Property<string>("DwName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DW_NAME");

                    b.Property<string>("EInvCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("E_INV_CODE");

                    b.Property<string>("EInvType")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("E_INV_TYPE");

                    b.Property<int?>("Flag1")
                        .HasColumnType("int")
                        .HasColumnName("FLAG1");

                    b.Property<int?>("LastSub")
                        .HasColumnType("int")
                        .HasColumnName("LAST_SUB");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("MainName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MAIN_NAME");

                    b.Property<string>("MainName2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MAIN_NAME2");

                    b.Property<string>("MainNameAll")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("MAIN_NAME_ALL");

                    b.Property<int?>("MainSort")
                        .HasColumnType("int")
                        .HasColumnName("MAIN_SORT");

                    b.Property<string>("ParentCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PARENT_CODE");

                    b.Property<int?>("PolicyPrice")
                        .HasColumnType("int")
                        .HasColumnName("POLICY_PRICE");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.Property<int?>("RowOnOff")
                        .HasColumnType("int")
                        .HasColumnName("ROW_ON_OFF");

                    b.Property<decimal?>("ServicePrc")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("SERVICE_PRC");

                    b.Property<int?>("UserCode")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE");

                    b.HasKey("MainId");

                    b.ToTable("MAIN_ITEM");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.MainItemStock", b =>
                {
                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<int>("Flag1")
                        .HasColumnType("int")
                        .HasColumnName("FLAG1");

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int>("Stkcod")
                        .HasColumnType("int")
                        .HasColumnName("STKCOD");

                    b.HasKey("MainCode", "Flag1", "BranchId", "Stkcod");

                    b.ToTable("MAIN_ITEM_STOCK");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.PlaceCode", b =>
                {
                    b.Property<int?>("Branch")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH");

                    b.Property<string>("CityCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("CITY_CODE");

                    b.Property<string>("PlaceCode1")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("PLACE_CODE");

                    b.Property<string>("PlaceName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("PLACE_NAME");

                    b.ToTable("PLACE_CODE");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.SalesmenDatum", b =>
                {
                    b.Property<int>("SalesManId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SALES_MAN_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesManId"));

                    b.Property<string>("EMail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("E_MAIL");

                    b.Property<int?>("Flag")
                        .HasColumnType("int")
                        .HasColumnName("FLAG");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(10, 3)")
                        .HasColumnName("SALARY");

                    b.Property<string>("SmActive")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("SM_ACTIVE");

                    b.Property<string>("SmAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SM_ADDRESS");

                    b.Property<string>("SmMobil")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SM_MOBIL");

                    b.Property<string>("SmName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SM_NAME");

                    b.Property<int?>("SmNo")
                        .HasColumnType("int")
                        .HasColumnName("SM_NO");

                    b.Property<string>("SmTel")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SM_TEL");

                    b.Property<decimal?>("Target")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("TARGET");

                    b.Property<int?>("UserCode")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE");

                    b.HasKey("SalesManId");

                    b.ToTable("SALESMEN_DATA");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.Side", b =>
                {
                    b.Property<int>("SideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SIDE_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SideId"));

                    b.Property<string>("SideDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SIDE_DESC");

                    b.HasKey("SideId");

                    b.ToTable("SIDES");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.StentDes", b =>
                {
                    b.Property<string>("StentDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("STENT_DESC");

                    b.Property<int?>("StentId")
                        .HasColumnType("int")
                        .HasColumnName("STENT_ID");

                    b.Property<int?>("StentType")
                        .HasColumnType("int")
                        .HasColumnName("STENT_TYPE");

                    b.ToTable("STENT_DES");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.Stkbalance", b =>
                {
                    b.Property<int>("StkbalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StkbalanceId"));

                    b.Property<string>("BarCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("BAR_CODE");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<decimal?>("CostLastVal")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("COST_LAST_VAL");

                    b.Property<int?>("DelItem")
                        .HasColumnType("int")
                        .HasColumnName("DEL_ITEM");

                    b.Property<DateTime?>("ExpDate")
                        .HasColumnType("datetime")
                        .HasColumnName("EXP_DATE");

                    b.Property<int?>("ExpM")
                        .HasColumnType("int")
                        .HasColumnName("EXP_M");

                    b.Property<int?>("ExpYr")
                        .HasColumnType("int")
                        .HasColumnName("EXP_YR");

                    b.Property<int?>("FYear")
                        .HasColumnType("int")
                        .HasColumnName("F_YEAR");

                    b.Property<int?>("Flag1")
                        .HasColumnType("int")
                        .HasColumnName("FLAG1");

                    b.Property<int?>("GId")
                        .HasColumnType("int")
                        .HasColumnName("G_ID");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ITEM_CODE");

                    b.Property<string>("ItemCodeError")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ITEM_CODE_ERROR");

                    b.Property<long?>("ItemCounter")
                        .HasColumnType("bigint")
                        .HasColumnName("ITEM_COUNTER");

                    b.Property<string>("ItemFlag")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("ITEM_FLAG");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.Property<decimal?>("ItemPrice")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("ITEM_PRICE");

                    b.Property<decimal?>("ItemPrice2")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("ITEM_PRICE2");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<int?>("PlaceStk")
                        .HasColumnType("int")
                        .HasColumnName("PLACE_STK");

                    b.Property<int?>("PostPos")
                        .HasColumnType("int")
                        .HasColumnName("POST_POS");

                    b.Property<decimal?>("QtyCurr")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("QTY_CURR");

                    b.Property<DateTime?>("QtyCurrDt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("QTY_CURR_DT");

                    b.Property<decimal?>("QtyLast")
                        .HasColumnType("decimal(12, 3)")
                        .HasColumnName("QTY_LAST");

                    b.Property<decimal?>("QtyStart")
                        .HasColumnType("decimal(12, 3)")
                        .HasColumnName("QTY_START");

                    b.Property<DateTime?>("QtyStartDt")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("QTY_START_DT");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.Property<int?>("SId")
                        .HasColumnType("int")
                        .HasColumnName("S_ID");

                    b.Property<int?>("Ser")
                        .HasColumnType("int")
                        .HasColumnName("SER");

                    b.Property<short?>("Stkcod")
                        .HasColumnType("smallint")
                        .HasColumnName("STKCOD");

                    b.Property<int?>("UnitCode")
                        .HasColumnType("int")
                        .HasColumnName("UNIT_CODE");

                    b.HasKey("StkbalanceId");

                    b.ToTable("STKBALANCE");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.Stock", b =>
                {
                    b.Property<int>("Stkcod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("STKCOD");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Stkcod"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("Flag1")
                        .HasColumnType("int")
                        .HasColumnName("FLAG1");

                    b.Property<int?>("JornalCode")
                        .HasColumnType("int")
                        .HasColumnName("JORNAL_CODE");

                    b.Property<int?>("StkDefult")
                        .HasColumnType("int")
                        .HasColumnName("STK_DEFULT");

                    b.Property<int?>("StkOnOff")
                        .HasColumnType("int")
                        .HasColumnName("STK_ON_OFF");

                    b.Property<string>("Stknam")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STKNAM");

                    b.Property<int?>("StockPurchOnshelf")
                        .HasColumnType("int")
                        .HasColumnName("STOCK_PURCH_ONSHELF");

                    b.Property<int?>("StockType")
                        .HasColumnType("int")
                        .HasColumnName("STOCK_TYPE");

                    b.HasKey("Stkcod");

                    b.HasIndex("BranchId");

                    b.HasIndex("Flag1");

                    b.HasIndex("JornalCode");

                    b.ToTable("STOCK");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.StockEmp", b =>
                {
                    b.Property<int>("StockEmpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockEmpID"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<string>("JornalCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("JORNAL_CODE");

                    b.Property<string>("MainCodeAcc")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE_ACC");

                    b.Property<string>("MainCodeStk")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE_STK");

                    b.Property<int?>("ShowPrice")
                        .HasColumnType("int")
                        .HasColumnName("SHOW_PRICE");

                    b.Property<int?>("Stkcod")
                        .HasColumnType("int")
                        .HasColumnName("STKCOD");

                    b.Property<int?>("StockDef")
                        .HasColumnType("int")
                        .HasColumnName("STOCK_DEF");

                    b.Property<string>("SubCodeAcc")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE_ACC");

                    b.Property<string>("SubCodeStk")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE_STK");

                    b.Property<int?>("TransType")
                        .HasColumnType("int")
                        .HasColumnName("TRANS_TYPE");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.HasKey("StockEmpID");

                    b.ToTable("STOCK_EMP");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.StockEmpFlag", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.Property<int>("Stkcod")
                        .HasColumnType("int")
                        .HasColumnName("STKCOD");

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int>("KID")
                        .HasColumnType("int")
                        .HasColumnName("K_ID");

                    b.HasKey("UserId", "Stkcod", "BranchId", "KID");

                    b.HasIndex("BranchId");

                    b.HasIndex("KID");

                    b.HasIndex("Stkcod");

                    b.ToTable("STOCK_EMP_FLAG");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.StoreTran", b =>
                {
                    b.Property<int>("TransId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TRANS_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransId"));

                    b.Property<string>("TransDesc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TRANS_DESC");

                    b.HasKey("TransId");

                    b.ToTable("STORE_TRANS");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.SubItem", b =>
                {
                    b.Property<int>("SubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SUB_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubId"));

                    b.Property<int?>("AuthorityDt")
                        .HasColumnType("int")
                        .HasColumnName("AUTHORITY_DT");

                    b.Property<int?>("BatchCounter")
                        .HasColumnType("int")
                        .HasColumnName("BATCH_COUNTER");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<string>("EInvCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("E_INV_CODE");

                    b.Property<string>("EInvType")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("E_INV_TYPE");

                    b.Property<int?>("EffectiveMaterial")
                        .HasColumnType("int")
                        .HasColumnName("EFFECTIVE_MATERIAL");

                    b.Property<int?>("Flag1")
                        .HasColumnType("int")
                        .HasColumnName("FLAG1");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ITEM_CODE");

                    b.Property<int?>("ItemCounter")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_COUNTER");

                    b.Property<int?>("ItemFreezer")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_FREEZER");

                    b.Property<int?>("ItemGroup")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_GROUP");

                    b.Property<int?>("ItemNature")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_NATURE");

                    b.Property<int?>("ItemOrigin")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ORIGIN");

                    b.Property<string>("ItemPic")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("ITEM_PIC");

                    b.Property<decimal?>("ItemPrice")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("ITEM_PRICE");

                    b.Property<decimal?>("ItemTax")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("ITEM_TAX");

                    b.Property<string>("ItemUse")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("ITEM_USE");

                    b.Property<decimal?>("LemitCall")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("LEMIT_CALL");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<int?>("MainId")
                        .HasColumnType("int")
                        .HasColumnName("MAIN_ID");

                    b.Property<string>("MainName2")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("MAIN_NAME2");

                    b.Property<int?>("MainSort")
                        .HasColumnType("int")
                        .HasColumnName("MAIN_SORT");

                    b.Property<int?>("Medicine")
                        .HasColumnType("int")
                        .HasColumnName("MEDICINE");

                    b.Property<string>("OldItemCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("OLD_ITEM_CODE");

                    b.Property<int?>("ProdCom")
                        .HasColumnType("int")
                        .HasColumnName("PROD_COM");

                    b.Property<int?>("ProtectColumun")
                        .HasColumnType("int")
                        .HasColumnName("PROTECT_COLUMUN");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.Property<int?>("RowOnOff")
                        .HasColumnType("int")
                        .HasColumnName("ROW_ON_OFF");

                    b.Property<int?>("ScientificGrp")
                        .HasColumnType("int")
                        .HasColumnName("SCIENTIFIC_GRP");

                    b.Property<int?>("StentId")
                        .HasColumnType("int")
                        .HasColumnName("STENT_ID");

                    b.Property<int?>("Sub")
                        .HasColumnType("int")
                        .HasColumnName("SUB");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.Property<string>("SubName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("SUB_NAME");

                    b.Property<string>("SubNameE")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("SUB_NAME_E");

                    b.Property<int?>("UserSort")
                        .HasColumnType("int")
                        .HasColumnName("USER_SORT");

                    b.HasKey("SubId");

                    b.HasIndex("MainId");

                    b.ToTable("SUB_ITEM");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.SubItemDtl", b =>
                {
                    b.Property<int>("SubItemDtlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubItemDtlId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubItemDtlId"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<decimal?>("DiscValP1")
                        .HasColumnType("decimal(7, 2)")
                        .HasColumnName("DISC_VAL_P1");

                    b.Property<decimal?>("DiscValS1")
                        .HasColumnType("decimal(7, 2)")
                        .HasColumnName("DISC_VAL_S1");

                    b.Property<decimal?>("DiscoutP1")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("DISCOUT_P1");

                    b.Property<decimal?>("DiscoutS1")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("DISCOUT_S1");

                    b.Property<int?>("Flag1")
                        .HasColumnType("int")
                        .HasColumnName("FLAG1");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ITEM_CODE");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.Property<string>("ItemName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ITEM_NAME");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<int?>("PieceCount")
                        .HasColumnType("int")
                        .HasColumnName("PIECE_COUNT");

                    b.Property<int?>("ProtectColumun")
                        .HasColumnType("int")
                        .HasColumnName("PROTECT_COLUMUN");

                    b.Property<decimal?>("PurchAverage")
                        .HasColumnType("decimal(7, 2)")
                        .HasColumnName("PURCH_AVERAGE");

                    b.Property<decimal?>("PurchPrice")
                        .HasColumnType("decimal(7, 2)")
                        .HasColumnName("PURCH_PRICE");

                    b.Property<int?>("RowOnOff")
                        .HasColumnType("int")
                        .HasColumnName("ROW_ON_OFF");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("decimal(7, 2)")
                        .HasColumnName("SALE_PRICE");

                    b.Property<int?>("SmallUFlag")
                        .HasColumnType("int")
                        .HasColumnName("SMALL_U_FLAG");

                    b.Property<int?>("UnitCode")
                        .HasColumnType("int")
                        .HasColumnName("UNIT_CODE");

                    b.Property<int?>("UserModifyCode")
                        .HasColumnType("int")
                        .HasColumnName("USER_MODIFY_CODE");

                    b.Property<DateTime?>("UserModifyDate")
                        .HasColumnType("datetime")
                        .HasColumnName("USER_MODIFY_DATE");

                    b.HasKey("SubItemDtlId");

                    b.ToTable("SUB_ITEM_DTL");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.SupCode", b =>
                {
                    b.Property<int>("Sup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SUP");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sup"));

                    b.Property<int?>("AreaCode")
                        .HasColumnType("int")
                        .HasColumnName("AREA_CODE");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("CityCode")
                        .HasColumnType("int")
                        .HasColumnName("CITY_CODE");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("PersonName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("PERSON_NAME");

                    b.Property<string>("Remarks")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("REMARKS");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.Property<string>("SupAdd")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SUP_ADD");

                    b.Property<string>("SupCode1")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUP_CODE");

                    b.Property<string>("SupFax")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("SUP_FAX");

                    b.Property<string>("SupName")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("SUP_NAME");

                    b.Property<string>("SupPhone1")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("SUP_PHONE1");

                    b.Property<string>("SupPhone2")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("SUP_PHONE2");

                    b.Property<short?>("SupType")
                        .HasColumnType("smallint")
                        .HasColumnName("SUP_TYPE");

                    b.Property<decimal?>("ValCredit")
                        .HasColumnType("decimal(17, 3)")
                        .HasColumnName("VAL_CREDIT");

                    b.Property<decimal?>("ValDept")
                        .HasColumnType("decimal(17, 3)")
                        .HasColumnName("VAL_DEPT");

                    b.HasKey("Sup");

                    b.ToTable("SUP_CODE");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.TransDtl", b =>
                {
                    b.Property<int>("TransDtlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransDtlId"));

                    b.Property<string>("Availability")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("AVAILABILITY");

                    b.Property<decimal?>("BounsQty")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("BOUNS_QTY");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<decimal?>("CurrancyRate")
                        .HasColumnType("decimal(7, 3)")
                        .HasColumnName("CURRANCY_RATE");

                    b.Property<decimal?>("CurrancyRate2")
                        .HasColumnType("decimal(7, 3)")
                        .HasColumnName("CURRANCY_RATE2");

                    b.Property<short?>("CurrancyType")
                        .HasColumnType("smallint")
                        .HasColumnName("CURRANCY_TYPE");

                    b.Property<short?>("CurrancyType2")
                        .HasColumnType("smallint")
                        .HasColumnName("CURRANCY_TYPE2");

                    b.Property<decimal?>("CurrancyVal")
                        .HasColumnType("decimal(11, 3)")
                        .HasColumnName("CURRANCY_VAL");

                    b.Property<decimal?>("CurrancyVal2")
                        .HasColumnType("decimal(11, 3)")
                        .HasColumnName("CURRANCY_VAL2");

                    b.Property<string>("DesItem")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("DES_ITEM");

                    b.Property<string>("DiscBase")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("DISC_BASE");

                    b.Property<DateTime?>("DocDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("DOC_DATE");

                    b.Property<long?>("DocNo")
                        .HasColumnType("bigint")
                        .HasColumnName("DOC_NO");

                    b.Property<long?>("DocNoFr")
                        .HasColumnType("bigint")
                        .HasColumnName("DOC_NO_FR");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<decimal?>("ExpenQty")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("EXPEN_QTY");

                    b.Property<decimal?>("ExpenVal")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("EXPEN_VAL");

                    b.Property<DateTime?>("ExpireDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("EXPIRE_DATE");

                    b.Property<int?>("FMonth")
                        .HasColumnType("int")
                        .HasColumnName("F_MONTH");

                    b.Property<int?>("FYear")
                        .HasColumnType("int")
                        .HasColumnName("F_YEAR");

                    b.Property<int?>("Flag1")
                        .HasColumnType("int")
                        .HasColumnName("FLAG1");

                    b.Property<string>("FlagInv")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("FLAG_INV");

                    b.Property<int?>("GId")
                        .HasColumnType("int")
                        .HasColumnName("G_ID");

                    b.Property<string>("InvType")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("INV_TYPE");

                    b.Property<decimal?>("ItemCount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("ITEM_COUNT");

                    b.Property<string>("ItemDefine")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ITEM_DEFINE");

                    b.Property<decimal?>("ItemDiscount")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("ITEM_DISCOUNT");

                    b.Property<decimal?>("ItemDiscountPrc")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("ITEM_DISCOUNT_PRC");

                    b.Property<string>("ItemMaster")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ITEM_MASTER");

                    b.Property<int?>("ItemMaster2")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_MASTER2");

                    b.Property<string>("ItemMasterOre")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("ITEM_MASTER_ORE");

                    b.Property<decimal?>("ItemQty")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("ITEM_QTY");

                    b.Property<decimal?>("ItemUnitQty")
                        .HasColumnType("decimal(11, 3)")
                        .HasColumnName("ITEM_UNIT_QTY");

                    b.Property<decimal?>("ItemVal")
                        .HasColumnType("decimal(12, 3)")
                        .HasColumnName("ITEM_VAL");

                    b.Property<decimal?>("ItemVal2")
                        .HasColumnType("decimal(12, 4)")
                        .HasColumnName("ITEM_VAL2");

                    b.Property<string>("ItmBarcode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ITM_BARCODE");

                    b.Property<string>("ItmBatch")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ITM_BATCH");

                    b.Property<short?>("ItmHaveTax")
                        .HasColumnType("smallint")
                        .HasColumnName("ITM_HAVE_TAX");

                    b.Property<string>("LotNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LOT_NO");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFY_DATE");

                    b.Property<int?>("PostPos")
                        .HasColumnType("int")
                        .HasColumnName("POST_POS");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(11, 3)")
                        .HasColumnName("PRICE");

                    b.Property<decimal?>("Price2")
                        .HasColumnType("decimal(12, 4)")
                        .HasColumnName("PRICE2");

                    b.Property<decimal?>("Price3")
                        .HasColumnType("decimal(11, 3)")
                        .HasColumnName("PRICE3");

                    b.Property<decimal?>("PricePurchase")
                        .HasColumnType("decimal(11, 3)")
                        .HasColumnName("PRICE_PURCHASE");

                    b.Property<int?>("PriceType")
                        .HasColumnType("int")
                        .HasColumnName("PRICE_TYPE");

                    b.Property<decimal?>("PriceWithTax")
                        .HasColumnType("decimal(11, 3)")
                        .HasColumnName("PRICE_WITH_TAX");

                    b.Property<decimal?>("PriceWithoutTax")
                        .HasColumnType("decimal(11, 4)")
                        .HasColumnName("PRICE_WITHOUT_TAX");

                    b.Property<decimal?>("PurQty")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("PUR_QTY");

                    b.Property<string>("RefDocNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("REF_DOC_NO");

                    b.Property<string>("RefDocNo2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("REF_DOC_NO2");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.Property<int?>("SId")
                        .HasColumnType("int")
                        .HasColumnName("S_ID");

                    b.Property<int?>("SendFr")
                        .HasColumnType("int")
                        .HasColumnName("SEND_FR");

                    b.Property<long?>("SerSys")
                        .HasColumnType("bigint")
                        .HasColumnName("SER_SYS");

                    b.Property<long?>("Serial")
                        .HasColumnType("bigint")
                        .HasColumnName("SERIAL");

                    b.Property<int?>("ShowRow")
                        .HasColumnType("int")
                        .HasColumnName("SHOW_ROW");

                    b.Property<short?>("StockCode")
                        .HasColumnType("smallint")
                        .HasColumnName("STOCK_CODE");

                    b.Property<int?>("StoreType")
                        .HasColumnType("int")
                        .HasColumnName("STORE_TYPE");

                    b.Property<int?>("SubCode")
                        .HasColumnType("int")
                        .HasColumnName("SUB_CODE");

                    b.Property<int?>("SupNo")
                        .HasColumnType("int")
                        .HasColumnName("SUP_NO");

                    b.Property<string>("TaxBase")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("TAX_BASE");

                    b.Property<decimal?>("TaxPrc")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("TAX_PRC");

                    b.Property<int?>("TaxType")
                        .HasColumnType("int")
                        .HasColumnName("TAX_TYPE");

                    b.Property<decimal?>("TaxVal")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("TAX_VAL");

                    b.Property<decimal?>("TotSalesPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("TOT_SALES_PRICE");

                    b.Property<int>("TransMAsterID")
                        .HasColumnType("int");

                    b.Property<int?>("TransType")
                        .HasColumnType("int")
                        .HasColumnName("TRANS_TYPE");

                    b.Property<int?>("UnitCode")
                        .HasColumnType("int")
                        .HasColumnName("UNIT_CODE");

                    b.Property<decimal?>("UnitQty")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("UNIT_QTY");

                    b.Property<int?>("UserCode")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE");

                    b.HasKey("TransDtlId");

                    b.HasIndex("TransMAsterID");

                    b.ToTable("TRANS_DTL");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.TransMaster", b =>
                {
                    b.Property<int>("TransMAsterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransMAsterID"));

                    b.Property<long?>("AccTransNo")
                        .HasColumnType("bigint")
                        .HasColumnName("ACC_TRANS_NO");

                    b.Property<long?>("AccTransNo2")
                        .HasColumnType("bigint")
                        .HasColumnName("ACC_TRANS_NO2");

                    b.Property<string>("AccTransType")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("ACC_TRANS_TYPE");

                    b.Property<decimal?>("AddPers")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("ADD_PERS");

                    b.Property<decimal?>("AmountVisa")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("AMOUNT_VISA");

                    b.Property<string>("AttachFile")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("ATTACH_FILE");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<decimal?>("CashAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("CASH_AMOUNT");

                    b.Property<DateTime?>("ConfirmDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("CONFIRM_DATE");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CONTACT_PERSON");

                    b.Property<decimal?>("CustDisc1")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("CUST_DISC1");

                    b.Property<decimal?>("CustDisc2")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("CUST_DISC2");

                    b.Property<decimal?>("CustDisc3")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("CUST_DISC3");

                    b.Property<decimal?>("CustDisc4")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("CUST_DISC4");

                    b.Property<decimal?>("CustDisc5")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("CUST_DISC5");

                    b.Property<string>("CustNo")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("CUST_NO");

                    b.Property<decimal?>("Descount")
                        .HasColumnType("decimal(10, 4)")
                        .HasColumnName("DESCOUNT");

                    b.Property<decimal?>("DiscPers")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("DISC_PERS");

                    b.Property<string>("DiscountBase")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("DISCOUNT_BASE");

                    b.Property<DateTime?>("DocDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("DOC_DATE");

                    b.Property<long?>("DocNo")
                        .HasColumnType("bigint")
                        .HasColumnName("DOC_NO");

                    b.Property<string>("DocNo2")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("DOC_NO2");

                    b.Property<long?>("DocNoFr")
                        .HasColumnType("bigint")
                        .HasColumnName("DOC_NO_FR");

                    b.Property<DateTime?>("DueDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("DUE_DATE");

                    b.Property<int?>("DueMonth")
                        .HasColumnType("int")
                        .HasColumnName("DUE_MONTH");

                    b.Property<decimal?>("DueValue")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("DUE_VALUE");

                    b.Property<int?>("DueYear")
                        .HasColumnType("int")
                        .HasColumnName("DUE_YEAR");

                    b.Property<DateTime?>("EndDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("END_DATE");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<int?>("FMonth")
                        .HasColumnType("int")
                        .HasColumnName("F_MONTH");

                    b.Property<int?>("FYear")
                        .HasColumnType("int")
                        .HasColumnName("F_YEAR");

                    b.Property<string>("Flag")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("FLAG");

                    b.Property<int?>("Flag1")
                        .HasColumnType("int")
                        .HasColumnName("FLAG1");

                    b.Property<string>("Flag2")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("FLAG2");

                    b.Property<string>("Flag3")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("FLAG3");

                    b.Property<long?>("InvNo")
                        .HasColumnType("bigint")
                        .HasColumnName("INV_NO");

                    b.Property<string>("InvType")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("INV_TYPE");

                    b.Property<string>("LcNo")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("LC_NO");

                    b.Property<string>("LotNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LOT_NO");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFY_DATE");

                    b.Property<int?>("MsgCode")
                        .HasColumnType("int")
                        .HasColumnName("MSG_CODE");

                    b.Property<int?>("OperationType")
                        .HasColumnType("int")
                        .HasColumnName("OPERATION_TYPE");

                    b.Property<string>("Pay")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("PAY");

                    b.Property<int?>("PrcSm1")
                        .HasColumnType("int")
                        .HasColumnName("PRC_SM1");

                    b.Property<int?>("PrcSm2")
                        .HasColumnType("int")
                        .HasColumnName("PRC_SM2");

                    b.Property<short?>("PriceIncTax")
                        .HasColumnType("smallint")
                        .HasColumnName("PRICE_INC_TAX");

                    b.Property<int?>("Quote")
                        .HasColumnType("int")
                        .HasColumnName("QUOTE");

                    b.Property<string>("RecChecksNo")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("REC_CHECKS_NO");

                    b.Property<DateTime?>("RefDocDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("REF_DOC_DATE");

                    b.Property<string>("RefDocNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("REF_DOC_NO");

                    b.Property<string>("Remark")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("REMARK");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.Property<string>("SaleStatus")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("SALE_STATUS");

                    b.Property<int?>("SendFr")
                        .HasColumnType("int")
                        .HasColumnName("SEND_FR");

                    b.Property<long?>("SerSys")
                        .HasColumnType("bigint")
                        .HasColumnName("SER_SYS");

                    b.Property<int?>("ShowRow")
                        .HasColumnType("int")
                        .HasColumnName("SHOW_ROW");

                    b.Property<int?>("SideId")
                        .HasColumnType("int")
                        .HasColumnName("SIDE_ID");

                    b.Property<int?>("SmNo")
                        .HasColumnType("int")
                        .HasColumnName("SM_NO");

                    b.Property<int?>("SmNo2")
                        .HasColumnType("int")
                        .HasColumnName("SM_NO2");

                    b.Property<string>("StatusBal")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("STATUS_BAL");

                    b.Property<short?>("StockCode")
                        .HasColumnType("smallint")
                        .HasColumnName("STOCK_CODE");

                    b.Property<short?>("StockCode2")
                        .HasColumnType("smallint")
                        .HasColumnName("STOCK_CODE2");

                    b.Property<DateTime?>("SupInvDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("SUP_INV_DATE");

                    b.Property<string>("SupInvNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SUP_INV_NO");

                    b.Property<string>("SupNo")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUP_NO");

                    b.Property<string>("SupplyOrderNo")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("SUPPLY_ORDER_NO");

                    b.Property<string>("TaxBase")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("TAX_BASE");

                    b.Property<decimal?>("TaxPrc")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("TAX_PRC");

                    b.Property<decimal?>("TaxValue")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("TAX_VALUE");

                    b.Property<decimal?>("TotTransVal")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("TOT_TRANS_VAL");

                    b.Property<decimal?>("TotTransVal2")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("TOT_TRANS_VAL2");

                    b.Property<decimal?>("TotWeight")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("TOT_WEIGHT");

                    b.Property<int?>("TransConfirm")
                        .HasColumnType("int")
                        .HasColumnName("TRANS_CONFIRM");

                    b.Property<int?>("TransType")
                        .HasColumnType("int")
                        .HasColumnName("TRANS_TYPE");

                    b.Property<int?>("UserCode")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE");

                    b.Property<int?>("UserConfirm")
                        .HasColumnType("int")
                        .HasColumnName("USER_CONFIRM");

                    b.HasKey("TransMAsterID");

                    b.ToTable("TRANS_MASTER");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.UnitCode", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CODE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<int?>("Flag1")
                        .HasColumnType("int")
                        .HasColumnName("FLAG1");

                    b.Property<decimal?>("ItemQty")
                        .HasColumnType("decimal(15, 3)")
                        .HasColumnName("ITEM_QTY");

                    b.Property<string>("Names")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("NAMES");

                    b.HasKey("Code");

                    b.ToTable("UNIT_CODE");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.UserSide", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE");

                    b.Property<int>("SideId")
                        .HasColumnType("int")
                        .HasColumnName("SIDE_ID");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("DEPT_ID");

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int>("EisSectionTypesSecCode")
                        .HasColumnType("int");

                    b.Property<int>("EisSystemTypeId")
                        .HasColumnType("int")
                        .HasColumnName("EIS_SYS_ID");

                    b.Property<int>("Flag")
                        .HasColumnType("int")
                        .HasColumnName("FLAG1");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int")
                        .HasColumnName("USER_G_ID");

                    b.Property<int>("UserGroupsG_ID")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "SideId", "RegionId", "BranchId");

                    b.HasIndex("BranchId");

                    b.HasIndex("EisSectionTypesSecCode");

                    b.HasIndex("RegionId");

                    b.HasIndex("SideId");

                    b.HasIndex("UserGroupsG_ID");

                    b.HasIndex("UsersId");

                    b.ToTable("USER_SIDE");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.UserTranss", b =>
                {
                    b.Property<int>("UsrId")
                        .HasColumnType("int")
                        .HasColumnName("USR_ID");

                    b.Property<int>("GId")
                        .HasColumnType("int")
                        .HasColumnName("G_ID");

                    b.Property<string>("DType")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("D_TYPE");

                    b.Property<int?>("TransFlag")
                        .HasColumnType("int")
                        .HasColumnName("TRANS_FLAG");

                    b.Property<int?>("UeDel")
                        .HasColumnType("int")
                        .HasColumnName("UE_DEL");

                    b.Property<int?>("UeIns")
                        .HasColumnType("int")
                        .HasColumnName("UE_INS");

                    b.Property<int?>("UeSav")
                        .HasColumnType("int")
                        .HasColumnName("UE_SAV");

                    b.HasKey("UsrId", "GId");

                    b.ToTable("USER_TRANSS");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.UsersGroup", b =>
                {
                    b.Property<int>("G_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("G_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("G_ID"));

                    b.Property<bool>("FLAG")
                        .HasColumnType("bit")
                        .HasColumnName("FLAG");

                    b.Property<string>("G_NAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("G_NAME");

                    b.HasKey("G_ID");

                    b.ToTable("USERS_GROUP");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Treasury.AccSafeCash", b =>
                {
                    b.Property<int>("SafeCashId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SAFE_CASH_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SafeCashId"));

                    b.Property<string>("AccName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("ACC_NAME");

                    b.Property<long?>("AccTransNo")
                        .HasColumnType("bigint")
                        .HasColumnName("ACC_TRANS_NO");

                    b.Property<int?>("AccTransType")
                        .HasColumnType("int")
                        .HasColumnName("ACC_TRANS_TYPE");

                    b.Property<string>("AprovedFlag")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("APROVED_FLAG");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<int?>("CoCode")
                        .HasColumnType("int")
                        .HasColumnName("CO_CODE");

                    b.Property<string>("Commentt")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("COMMENTT");

                    b.Property<int?>("CostCenterCode")
                        .HasColumnType("int")
                        .HasColumnName("COST_CENTER_CODE");

                    b.Property<int?>("CshOrdNum")
                        .HasColumnType("int")
                        .HasColumnName("CSH_ORD_NUM");

                    b.Property<int?>("CurCode")
                        .HasColumnType("int")
                        .HasColumnName("CUR_CODE");

                    b.Property<int?>("CurSer")
                        .HasColumnType("int")
                        .HasColumnName("CUR_SER");

                    b.Property<string>("DeleteFlag")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("DELETE_FLAG");

                    b.Property<decimal?>("DiscountVal")
                        .HasColumnType("decimal(12, 3)")
                        .HasColumnName("DISCOUNT_VAL");

                    b.Property<DateTime?>("DocDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("DOC_DATE");

                    b.Property<int?>("DocNo")
                        .HasColumnType("int")
                        .HasColumnName("DOC_NO");

                    b.Property<int?>("DocNoFr")
                        .HasColumnType("int")
                        .HasColumnName("DOC_NO_FR");

                    b.Property<string>("DocType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("DOC_TYPE");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<int?>("EntryType")
                        .HasColumnType("int")
                        .HasColumnName("ENTRY_TYPE");

                    b.Property<double?>("FMonth")
                        .HasColumnType("float")
                        .HasColumnName("F_MONTH");

                    b.Property<int?>("FYear")
                        .HasColumnType("int")
                        .HasColumnName("F_YEAR");

                    b.Property<int?>("Flag")
                        .HasColumnType("int")
                        .HasColumnName("FLAG");

                    b.Property<string>("FlagPay")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("FLAG_PAY");

                    b.Property<decimal?>("GValuePay")
                        .HasColumnType("decimal(12, 3)")
                        .HasColumnName("G_VALUE_PAY");

                    b.Property<int?>("MCodeDtl")
                        .HasColumnType("int")
                        .HasColumnName("M_CODE_DTL");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<int?>("MasterId")
                        .HasColumnType("int")
                        .HasColumnName("MASTER_ID");

                    b.Property<int?>("PatRetFlag")
                        .HasColumnType("int")
                        .HasColumnName("PAT_RET_FLAG");

                    b.Property<string>("PersonName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("PERSON_NAME");

                    b.Property<int?>("PostRecipt")
                        .HasColumnType("int")
                        .HasColumnName("POST_RECIPT");

                    b.Property<decimal?>("ProfitTax")
                        .HasColumnType("decimal(9, 3)")
                        .HasColumnName("PROFIT_TAX");

                    b.Property<decimal?>("Rate1")
                        .HasColumnType("decimal(7, 4)")
                        .HasColumnName("RATE1");

                    b.Property<int?>("Replcate")
                        .HasColumnType("int")
                        .HasColumnName("REPLCATE");

                    b.Property<int?>("SafeCode")
                        .HasColumnType("int")
                        .HasColumnName("SAFE_CODE");

                    b.Property<int?>("SafeCode2")
                        .HasColumnType("int")
                        .HasColumnName("SAFE_CODE2");

                    b.Property<int?>("SerId")
                        .HasColumnType("int")
                        .HasColumnName("SER_ID");

                    b.Property<int?>("SmNo")
                        .HasColumnType("int")
                        .HasColumnName("SM_NO");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.Property<int?>("UserCode")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE");

                    b.Property<decimal?>("ValPayAfter")
                        .HasColumnType("decimal(9, 3)")
                        .HasColumnName("VAL_PAY_AFTER");

                    b.Property<decimal?>("ValuePay")
                        .HasColumnType("decimal(12, 3)")
                        .HasColumnName("VALUE_PAY");

                    b.HasKey("SafeCashId");

                    b.HasIndex("AccTransType");

                    b.HasIndex("CostCenterCode");

                    b.HasIndex("CurCode");

                    b.HasIndex("EntryType");

                    b.HasIndex("SafeCode");

                    b.ToTable("ACC_SAFE_CASH");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Treasury.AccSafeCheck", b =>
                {
                    b.Property<int>("SafeCeckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SAFE_CECK_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SafeCeckId"));

                    b.Property<string>("AccName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("ACC_NAME");

                    b.Property<string>("AccName2")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("ACC_NAME2");

                    b.Property<int?>("AccTransNo")
                        .HasColumnType("int")
                        .HasColumnName("ACC_TRANS_NO");

                    b.Property<int?>("AccTransNo2")
                        .HasColumnType("int")
                        .HasColumnName("ACC_TRANS_NO2");

                    b.Property<int?>("AccTransNo3")
                        .HasColumnType("int")
                        .HasColumnName("ACC_TRANS_NO3");

                    b.Property<int?>("AccTransType")
                        .HasColumnType("int")
                        .HasColumnName("ACC_TRANS_TYPE");

                    b.Property<int?>("AccTransType2")
                        .HasColumnType("int")
                        .HasColumnName("ACC_TRANS_TYPE2");

                    b.Property<int?>("AccTransType3")
                        .HasColumnType("int")
                        .HasColumnName("ACC_TRANS_TYPE3");

                    b.Property<string>("BankMainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("BANK_MAIN_CODE");

                    b.Property<string>("BankSubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("BANK_SUB_CODE");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<string>("CheckStatus")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("CHECK_STATUS");

                    b.Property<int?>("CheckType")
                        .HasColumnType("int")
                        .HasColumnName("CHECK_TYPE");

                    b.Property<DateTime?>("ChekDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("CHEK_DATE");

                    b.Property<DateTime?>("ChekDate2")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("CHEK_DATE2");

                    b.Property<string>("ChekNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CHEK_NO");

                    b.Property<int?>("CoCode")
                        .HasColumnType("int")
                        .HasColumnName("CO_CODE");

                    b.Property<string>("Commentt")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("COMMENTT");

                    b.Property<int?>("CostCenterCode")
                        .HasColumnType("int")
                        .HasColumnName("COST_CENTER_CODE");

                    b.Property<int?>("CshOrdNum")
                        .HasColumnType("int")
                        .HasColumnName("CSH_ORD_NUM");

                    b.Property<int?>("CurSer")
                        .HasColumnType("int")
                        .HasColumnName("CUR_SER");

                    b.Property<int?>("CurrencyCode")
                        .HasColumnType("int")
                        .HasColumnName("CURRENCY_CODE");

                    b.Property<decimal?>("DiscountVal")
                        .HasColumnType("decimal(12, 3)")
                        .HasColumnName("DISCOUNT_VAL");

                    b.Property<DateTime?>("DocDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("DOC_DATE");

                    b.Property<int?>("DocNo")
                        .HasColumnType("int")
                        .HasColumnName("DOC_NO");

                    b.Property<int?>("DocNo1")
                        .HasColumnType("int")
                        .HasColumnName("DOC_NO1");

                    b.Property<int?>("DocNo2")
                        .HasColumnType("int")
                        .HasColumnName("DOC_NO2");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<int?>("FMonth")
                        .HasColumnType("int")
                        .HasColumnName("F_MONTH");

                    b.Property<int?>("FYear")
                        .HasColumnType("int")
                        .HasColumnName("F_YEAR");

                    b.Property<int?>("Flag")
                        .HasColumnType("int")
                        .HasColumnName("FLAG");

                    b.Property<string>("FlagApr")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("FLAG_APR");

                    b.Property<string>("FlagPay")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("FLAG_PAY");

                    b.Property<string>("FlagPayStatus")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("FLAG_PAY_STATUS");

                    b.Property<string>("FlagS")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("FLAG_S");

                    b.Property<decimal?>("GValuePay")
                        .HasColumnType("decimal(12, 3)")
                        .HasColumnName("G_VALUE_PAY");

                    b.Property<int?>("MCodeDtl")
                        .HasColumnType("int")
                        .HasColumnName("M_CODE_DTL");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("MainCode2")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE2");

                    b.Property<string>("PersonName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PERSON_NAME");

                    b.Property<decimal?>("ProfitTax")
                        .HasColumnType("decimal(9, 3)")
                        .HasColumnName("PROFIT_TAX");

                    b.Property<decimal?>("Rate1")
                        .HasColumnType("decimal(7, 4)")
                        .HasColumnName("RATE1");

                    b.Property<int?>("SafeCode")
                        .HasColumnType("int")
                        .HasColumnName("SAFE_CODE");

                    b.Property<DateTime?>("SattlDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("SATTL_DATE");

                    b.Property<int?>("SmNo")
                        .HasColumnType("int")
                        .HasColumnName("SM_NO");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.Property<string>("SubCode2")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE2");

                    b.Property<string>("SubCodeBank")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE_BANK");

                    b.Property<string>("TranType")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("TRAN_TYPE");

                    b.Property<int?>("UserCode")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE");

                    b.Property<decimal?>("ValuePay")
                        .HasColumnType("decimal(12, 3)")
                        .HasColumnName("VALUE_PAY");

                    b.HasKey("SafeCeckId");

                    b.HasIndex("AccTransType");

                    b.HasIndex("CostCenterCode");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("SafeCode");

                    b.ToTable("ACC_SAFE_CHECK");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Treasury.BankData", b =>
                {
                    b.Property<int>("BankNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BANK_NO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankNo"));

                    b.Property<string>("BankDesc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BANK_DESC");

                    b.HasKey("BankNo");

                    b.ToTable("BANK_DATA");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Treasury.CustCollectionsDiscount", b =>
                {
                    b.Property<int?>("DiscountCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DISCOUNT_CODE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("DiscountCode"));

                    b.Property<int?>("AccSafeCheckSafeCeckId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<decimal?>("DiscPrc")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("DISC_PRC");

                    b.Property<decimal?>("DiscValue")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("DISC_VALUE");

                    b.Property<string>("DocType")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("DOC_TYPE");

                    b.Property<int?>("FYear")
                        .HasColumnType("int")
                        .HasColumnName("F_YEAR");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<DateTime?>("ReceiptDate")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)")
                        .HasColumnName("RECEIPT_DATE");

                    b.Property<int?>("ReceiptNo")
                        .HasColumnType("int")
                        .HasColumnName("RECEIPT_NO");

                    b.Property<int?>("SafeCashId")
                        .HasColumnType("int")
                        .HasColumnName("SAFE_CASH_ID");

                    b.Property<int?>("SafeCode")
                        .HasColumnType("int")
                        .HasColumnName("SAFE_CODE");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.HasKey("DiscountCode");

                    b.HasIndex("AccSafeCheckSafeCeckId");

                    b.HasIndex("SafeCashId");

                    b.ToTable("CUST_COLLECTIONS_DISCOUNT");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Treasury.GTable", b =>
                {
                    b.Property<int>("GCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("G_CODE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GCode"));

                    b.Property<int?>("Flag")
                        .HasColumnType("int")
                        .HasColumnName("FLAG");

                    b.Property<string>("GDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("G_DESC");

                    b.Property<int?>("GType")
                        .HasColumnType("int")
                        .HasColumnName("G_TYPE");

                    b.Property<decimal?>("GValue")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("G_VALUE");

                    b.HasKey("GCode");

                    b.ToTable("G_TABLE");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Treasury.SafeName", b =>
                {
                    b.Property<int>("SafeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SAFE_CODE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SafeCode"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<int?>("Flag1")
                        .HasColumnType("int")
                        .HasColumnName("FLAG1");

                    b.Property<string>("JeDocTyp")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("JE_DOC_TYP");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFY_DATE");

                    b.Property<int?>("PostAccount")
                        .HasColumnType("int")
                        .HasColumnName("POST_ACCOUNT");

                    b.Property<string>("SafeNames")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SAFE_NAMES");

                    b.Property<int?>("UserCd")
                        .HasColumnType("int")
                        .HasColumnName("USER_CD");

                    b.Property<int?>("UserModifyCd")
                        .HasColumnType("int")
                        .HasColumnName("USER_MODIFY_CD");

                    b.HasKey("SafeCode");

                    b.ToTable("SAFE_NAME");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Treasury.UserCashNo", b =>
                {
                    b.Property<int>("UserCashID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("USER_CASH_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCashID"));

                    b.Property<int?>("ActdeactFlag")
                        .HasColumnType("int")
                        .HasColumnName("ACTDEACT_FLAG");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID");

                    b.Property<string>("CshUsr")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("CSH_USR");

                    b.Property<int?>("MCode")
                        .HasColumnType("int")
                        .HasColumnName("M_CODE");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("MainCode2")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE2");

                    b.Property<int?>("SafeCode")
                        .HasColumnType("int")
                        .HasColumnName("SAFE_CODE");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.Property<string>("SubCode2")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE2");

                    b.Property<int?>("UserCode")
                        .HasColumnType("int")
                        .HasColumnName("USER_CODE");

                    b.HasKey("UserCashID");

                    b.ToTable("USER_CASH_NO");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProSoft.EF.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProSoft.EF.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSoft.EF.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProSoft.EF.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProSoft.EF.Models.Accounts.AccTransDetail", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Accounts.AccTransMaster", "AccTransMasters")
                        .WithMany("AccTransDetails")
                        .HasForeignKey("TransId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccTransMasters");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Accounts.UserJournalType", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Accounts.JournalType", "JournalType")
                        .WithMany()
                        .HasForeignKey("JournalCode");

                    b.Navigation("JournalType");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.ClinicTran", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.MainClinic", "Clinic")
                        .WithMany("ClinicTrans")
                        .HasForeignKey("ClinicId");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.Doctor", "DrSendNavigation")
                        .WithMany("ClinicTrans")
                        .HasForeignKey("DrSend");

                    b.HasOne("ProSoft.EF.Models.Stocks.MainItem", "Main")
                        .WithMany("ClinicTrans")
                        .HasForeignKey("MainId");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.PatAdmission", "Master")
                        .WithMany("ClinicTrans")
                        .HasForeignKey("MasterId");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.SubClinic", "SClinic")
                        .WithMany("ClinicTrans")
                        .HasForeignKey("SClinicId");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.ServiceClinic", "Serv")
                        .WithMany("ClinicTrans")
                        .HasForeignKey("ServId");

                    b.HasOne("ProSoft.EF.Models.Stocks.SubItem", "Sub")
                        .WithMany("ClinicTrans")
                        .HasForeignKey("SubId");

                    b.Navigation("Clinic");

                    b.Navigation("DrSendNavigation");

                    b.Navigation("Main");

                    b.Navigation("Master");

                    b.Navigation("SClinic");

                    b.Navigation("Serv");

                    b.Navigation("Sub");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.Company", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.CompanyGroup", "Group")
                        .WithMany("Companies")
                        .HasForeignKey("GroupId");

                    b.HasOne("ProSoft.EF.Models.Stocks.KindStore", "KindStoreNavigation")
                        .WithMany("Companies")
                        .HasForeignKey("KindStore");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.PriceList", "PL")
                        .WithMany("Companies")
                        .HasForeignKey("PLId");

                    b.Navigation("Group");

                    b.Navigation("KindStoreNavigation");

                    b.Navigation("PL");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.CompanyDtl", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.Company", "Comp")
                        .WithMany("CompanyDtls")
                        .HasForeignKey("CompId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comp");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.DocSubDtl", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.MainClinic", "Clinic")
                        .WithMany("DocSubDtls")
                        .HasForeignKey("ClinicId");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.Doctor", "Dr")
                        .WithMany("DocSubDtls")
                        .HasForeignKey("DrId");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.SubClinic", "SClinic")
                        .WithMany("DocSubDtls")
                        .HasForeignKey("SClinicId");

                    b.Navigation("Clinic");

                    b.Navigation("Dr");

                    b.Navigation("SClinic");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.Doctor", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.DrDegree", "DrDegreeNavigation")
                        .WithMany("Doctors")
                        .HasForeignKey("DrDegree");

                    b.Navigation("DrDegreeNavigation");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.DoctorsPercent", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.Doctor", "DrCodeNavigation")
                        .WithMany("DoctorsPercents")
                        .HasForeignKey("DrCode");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.SubClinic", "SubCodeNavigation")
                        .WithMany("DoctorsPercents")
                        .HasForeignKey("SubCode");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.ServiceClinic", "SubDetailCodeL1Navigation")
                        .WithMany("DoctorsPercents")
                        .HasForeignKey("SubDetailCodeL1");

                    b.Navigation("DrCodeNavigation");

                    b.Navigation("SubCodeNavigation");

                    b.Navigation("SubDetailCodeL1Navigation");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.MainClinic", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.EisSectionType", "SysSectionNavigation")
                        .WithMany("MainClinics")
                        .HasForeignKey("SysSection");

                    b.Navigation("SysSectionNavigation");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.PatAdmission", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.ClassificationCust", "BrnachInitialNavigation")
                        .WithMany("PatAdmissions")
                        .HasForeignKey("BrnachInitial");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.Company", "Comp")
                        .WithMany("PatAdmissions")
                        .HasForeignKey("CompId");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.CompanyDtl", "CompIdDtlNavigation")
                        .WithMany("PatAdmissions")
                        .HasForeignKey("CompIdDtl");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.Doctor", "DrCodeNavigation")
                        .WithMany("PatAdmissions")
                        .HasForeignKey("DrCode");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.Pat", "Pat")
                        .WithMany("PatAdmissions")
                        .HasForeignKey("PatId");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.Region", "SendFrNavigation")
                        .WithMany("PatAdmissions")
                        .HasForeignKey("SendFr");

                    b.Navigation("BrnachInitialNavigation");

                    b.Navigation("Comp");

                    b.Navigation("CompIdDtlNavigation");

                    b.Navigation("DrCodeNavigation");

                    b.Navigation("Pat");

                    b.Navigation("SendFrNavigation");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.PriceList", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Shared.Branch", "Branch")
                        .WithMany("PriceLists")
                        .HasForeignKey("BranchId");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.PriceListDetail", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Shared.Branch", "Branch")
                        .WithMany("PriceListDetails")
                        .HasForeignKey("BranchId");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.MainClinic", "Clinic")
                        .WithMany("PriceListDetails")
                        .HasForeignKey("ClinicId");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.PriceList", "PL")
                        .WithMany("PriceListDetails")
                        .HasForeignKey("PLId");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.SubClinic", "SClinic")
                        .WithMany("PriceListDetails")
                        .HasForeignKey("SClinicId");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.ServiceClinic", "Serv")
                        .WithMany("PriceListDetails")
                        .HasForeignKey("ServId");

                    b.Navigation("Branch");

                    b.Navigation("Clinic");

                    b.Navigation("PL");

                    b.Navigation("SClinic");

                    b.Navigation("Serv");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.Region", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.ClassificationCust", "ClassificationCustNavigation")
                        .WithMany("Regions")
                        .HasForeignKey("ClassificationCust");

                    b.Navigation("ClassificationCustNavigation");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.ServiceClinic", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Accounts.CostCenter", "CostCodeNavigation")
                        .WithMany("ServiceClinics")
                        .HasForeignKey("CostCode");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.SubClinic", "SClinic")
                        .WithMany("ServiceClinics")
                        .HasForeignKey("SClinicId");

                    b.Navigation("CostCodeNavigation");

                    b.Navigation("SClinic");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.SubClinic", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.MainClinic", "Clinic")
                        .WithMany("SubClinics")
                        .HasForeignKey("ClinicId");

                    b.HasOne("ProSoft.EF.Models.Accounts.CostCenter", "CostCodeNavigation")
                        .WithMany("SubClinics")
                        .HasForeignKey("CostCode");

                    b.HasOne("ProSoft.EF.Models.Stocks.Stock", "StockCdNavigation")
                        .WithMany("SubClinics")
                        .HasForeignKey("StockCd");

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.ServiceType", "Typ")
                        .WithMany("SubClinics")
                        .HasForeignKey("TypId");

                    b.Navigation("Clinic");

                    b.Navigation("CostCodeNavigation");

                    b.Navigation("StockCdNavigation");

                    b.Navigation("Typ");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.CoronaryAngiographyReport", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.Pat", "Pat")
                        .WithMany("CoronaryAngiographyReports")
                        .HasForeignKey("PatId");

                    b.Navigation("Pat");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.DailyFollowUpCcuChant", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.Pat", "Pat")
                        .WithMany("DailyFollowUpCcuChants")
                        .HasForeignKey("PatId");

                    b.Navigation("Pat");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.DischargeSummery", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.Pat", "Pat")
                        .WithMany("DischargeSummeries")
                        .HasForeignKey("PatId");

                    b.Navigation("Pat");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.EcgAndEcho", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.Pat", "Pat")
                        .WithMany("EcgAndEchoes")
                        .HasForeignKey("PatId");

                    b.Navigation("Pat");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.Echo", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.Pat", "Pat")
                        .WithMany("Echoes")
                        .HasForeignKey("PatId");

                    b.Navigation("Pat");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.HistoryExamination", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.Pat", "Pat")
                        .WithMany("HistoryExaminations")
                        .HasForeignKey("PatId");

                    b.Navigation("Pat");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.LabReport", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.Pat", "Pat")
                        .WithMany("LabReports")
                        .HasForeignKey("PatId");

                    b.Navigation("Pat");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.MedicationAtCcu", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.Pat", "Pat")
                        .WithMany("medicationAtCcus")
                        .HasForeignKey("PatId");

                    b.Navigation("Pat");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.PastHistory", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.Pat", "Pat")
                        .WithMany("PastHistories")
                        .HasForeignKey("PatId");

                    b.Navigation("Pat");
                });

            modelBuilder.Entity("ProSoft.EF.Models.MedicalRecords.PciReport", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.Pat", "Pat")
                        .WithMany("PciReports")
                        .HasForeignKey("PatId");

                    b.Navigation("Pat");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Shared.Sections2", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Shared.Branch", "Branch")
                        .WithMany("Sections2s")
                        .HasForeignKey("BranchId");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.Stock", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Shared.Branch", "Branch")
                        .WithMany("Stocks")
                        .HasForeignKey("BranchId");

                    b.HasOne("ProSoft.EF.Models.Stocks.KindStore", "Flag1Navigation")
                        .WithMany("Stocks")
                        .HasForeignKey("Flag1");

                    b.HasOne("ProSoft.EF.Models.Accounts.JournalType", "JornalCodeNavigation")
                        .WithMany("Stocks")
                        .HasForeignKey("JornalCode");

                    b.Navigation("Branch");

                    b.Navigation("Flag1Navigation");

                    b.Navigation("JornalCodeNavigation");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.StockEmpFlag", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Shared.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSoft.EF.Models.Stocks.KindStore", "KindStore")
                        .WithMany()
                        .HasForeignKey("KID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSoft.EF.Models.Stocks.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("Stkcod")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("KindStore");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.SubItem", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Stocks.MainItem", "Main")
                        .WithMany("SubItems")
                        .HasForeignKey("MainId");

                    b.Navigation("Main");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.TransDtl", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Stocks.TransMaster", "PermissionForm")
                        .WithMany("TransDetails")
                        .HasForeignKey("TransMAsterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionForm");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.UserSide", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Shared.Branch", "Branchs")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.EisSectionType", "EisSectionTypes")
                        .WithMany()
                        .HasForeignKey("EisSectionTypesSecCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSoft.EF.Models.Medical.HospitalPatData.Region", "Regions")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSoft.EF.Models.Stocks.Side", "Sides")
                        .WithMany()
                        .HasForeignKey("SideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSoft.EF.Models.Stocks.UsersGroup", "UserGroups")
                        .WithMany()
                        .HasForeignKey("UserGroupsG_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProSoft.EF.Models.AppUser", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branchs");

                    b.Navigation("EisSectionTypes");

                    b.Navigation("Regions");

                    b.Navigation("Sides");

                    b.Navigation("UserGroups");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Treasury.AccSafeCash", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Accounts.JournalType", "JournalType")
                        .WithMany("AccSafeCashes")
                        .HasForeignKey("AccTransType");

                    b.HasOne("ProSoft.EF.Models.Accounts.CostCenter", "CostCenter")
                        .WithMany("AccSafeCashes")
                        .HasForeignKey("CostCenterCode");

                    b.HasOne("ProSoft.EF.Models.Shared.AccGlobalDef", "AccGlobalDef")
                        .WithMany("AccSafeCashes")
                        .HasForeignKey("CurCode");

                    b.HasOne("ProSoft.EF.Models.Treasury.GTable", "GTable")
                        .WithMany("AccSafeCashes")
                        .HasForeignKey("EntryType");

                    b.HasOne("ProSoft.EF.Models.Treasury.SafeName", "SafeName")
                        .WithMany("AccSafeCashes")
                        .HasForeignKey("SafeCode");

                    b.Navigation("AccGlobalDef");

                    b.Navigation("CostCenter");

                    b.Navigation("GTable");

                    b.Navigation("JournalType");

                    b.Navigation("SafeName");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Treasury.AccSafeCheck", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Accounts.JournalType", "JournalType")
                        .WithMany("AccSafeChecks")
                        .HasForeignKey("AccTransType");

                    b.HasOne("ProSoft.EF.Models.Accounts.CostCenter", "CostCenter")
                        .WithMany("AccSafeChecks")
                        .HasForeignKey("CostCenterCode");

                    b.HasOne("ProSoft.EF.Models.Shared.AccGlobalDef", "AccGlobalDef")
                        .WithMany("AccSafeChecks")
                        .HasForeignKey("CurrencyCode");

                    b.HasOne("ProSoft.EF.Models.Treasury.SafeName", "SafeName")
                        .WithMany("AccSafeChecks")
                        .HasForeignKey("SafeCode");

                    b.Navigation("AccGlobalDef");

                    b.Navigation("CostCenter");

                    b.Navigation("JournalType");

                    b.Navigation("SafeName");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Treasury.CustCollectionsDiscount", b =>
                {
                    b.HasOne("ProSoft.EF.Models.Treasury.AccSafeCheck", null)
                        .WithMany("custCollectionsDiscounts")
                        .HasForeignKey("AccSafeCheckSafeCeckId");

                    b.HasOne("ProSoft.EF.Models.Treasury.AccSafeCash", "accSafeCash")
                        .WithMany("custCollectionsDiscounts")
                        .HasForeignKey("SafeCashId");

                    b.Navigation("accSafeCash");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Accounts.AccTransMaster", b =>
                {
                    b.Navigation("AccTransDetails");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Accounts.CostCenter", b =>
                {
                    b.Navigation("AccSafeCashes");

                    b.Navigation("AccSafeChecks");

                    b.Navigation("ServiceClinics");

                    b.Navigation("SubClinics");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Accounts.JournalType", b =>
                {
                    b.Navigation("AccSafeCashes");

                    b.Navigation("AccSafeChecks");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.ClassificationCust", b =>
                {
                    b.Navigation("PatAdmissions");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.Company", b =>
                {
                    b.Navigation("CompanyDtls");

                    b.Navigation("PatAdmissions");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.CompanyDtl", b =>
                {
                    b.Navigation("PatAdmissions");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.CompanyGroup", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.Doctor", b =>
                {
                    b.Navigation("ClinicTrans");

                    b.Navigation("DocSubDtls");

                    b.Navigation("DoctorsPercents");

                    b.Navigation("PatAdmissions");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.DrDegree", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.EisSectionType", b =>
                {
                    b.Navigation("MainClinics");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.MainClinic", b =>
                {
                    b.Navigation("ClinicTrans");

                    b.Navigation("DocSubDtls");

                    b.Navigation("PriceListDetails");

                    b.Navigation("SubClinics");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.Pat", b =>
                {
                    b.Navigation("CoronaryAngiographyReports");

                    b.Navigation("DailyFollowUpCcuChants");

                    b.Navigation("DischargeSummeries");

                    b.Navigation("EcgAndEchoes");

                    b.Navigation("Echoes");

                    b.Navigation("HistoryExaminations");

                    b.Navigation("LabReports");

                    b.Navigation("PastHistories");

                    b.Navigation("PatAdmissions");

                    b.Navigation("PciReports");

                    b.Navigation("medicationAtCcus");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.PatAdmission", b =>
                {
                    b.Navigation("ClinicTrans");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.PriceList", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("PriceListDetails");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.Region", b =>
                {
                    b.Navigation("PatAdmissions");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.ServiceClinic", b =>
                {
                    b.Navigation("ClinicTrans");

                    b.Navigation("DoctorsPercents");

                    b.Navigation("PriceListDetails");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.ServiceType", b =>
                {
                    b.Navigation("SubClinics");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Medical.HospitalPatData.SubClinic", b =>
                {
                    b.Navigation("ClinicTrans");

                    b.Navigation("DocSubDtls");

                    b.Navigation("DoctorsPercents");

                    b.Navigation("PriceListDetails");

                    b.Navigation("ServiceClinics");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Shared.AccGlobalDef", b =>
                {
                    b.Navigation("AccSafeCashes");

                    b.Navigation("AccSafeChecks");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Shared.Branch", b =>
                {
                    b.Navigation("PriceListDetails");

                    b.Navigation("PriceLists");

                    b.Navigation("Sections2s");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.KindStore", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.MainItem", b =>
                {
                    b.Navigation("ClinicTrans");

                    b.Navigation("SubItems");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.Stock", b =>
                {
                    b.Navigation("SubClinics");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.SubItem", b =>
                {
                    b.Navigation("ClinicTrans");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Stocks.TransMaster", b =>
                {
                    b.Navigation("TransDetails");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Treasury.AccSafeCash", b =>
                {
                    b.Navigation("custCollectionsDiscounts");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Treasury.AccSafeCheck", b =>
                {
                    b.Navigation("custCollectionsDiscounts");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Treasury.GTable", b =>
                {
                    b.Navigation("AccSafeCashes");
                });

            modelBuilder.Entity("ProSoft.EF.Models.Treasury.SafeName", b =>
                {
                    b.Navigation("AccSafeCashes");

                    b.Navigation("AccSafeChecks");
                });
#pragma warning restore 612, 618
        }
    }
}
